<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fighting</title>
  
  <subtitle>少年,冲冲冲!</subtitle>
  <link href="https://lzl2040.github.io/atom.xml" rel="self"/>
  
  <link href="https://lzl2040.github.io/"/>
  <updated>2022-02-10T13:00:04.010Z</updated>
  <id>https://lzl2040.github.io/</id>
  
  <author>
    <name>Yxmlzl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法学习笔记-并查集</title>
    <link href="https://lzl2040.github.io/2022/02/09/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>https://lzl2040.github.io/2022/02/09/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B9%B6%E6%9F%A5%E9%9B%86/</id>
    <published>2022-02-09T12:55:10.000Z</published>
    <updated>2022-02-10T13:00:04.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>假设这么一种场景：突然有一天，你发现你和你的同桌原来有着很薄的亲戚关系，很久很久以前你们有一个共同的祖先，那么要怎么判断你和他的家族其实是同一个祖先了？</p><p>这个时候我们肯定想到的是不断往回推，即:我-&gt;我的爸爸-&gt;我的爷爷-&gt;我的爷爷的爸爸…一直往前推，直到出现一个交集，那个就是共同的祖先。</p><p>这个其实就是一种并查集的思想，合并两个集合，就是要找到一个共同的祖先。(这个祖先也可以自己设置)</p><p>从此以后，你们就是一家人了。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>并查集其实是一种树形的数据结构，它主要有两种操作，查找(Find)和合并(Union)。查找就类似于追溯自己的祖先，合并就相当于将两个家族合并，祭拜同一个祖先。这里一个家族就相当于一个集合，并查集主要是处理<strong>集合问题</strong>。</p><p>并查集的用途:</p><ul><li>解决元素分组的问题</li><li>合并不相交的集合</li><li>判断图中是否含有环</li><li>判断连通区域个数</li></ul><h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><h3 id="查找-Find"><a href="#查找-Find" class="headerlink" title="查找-Find"></a>查找-Find</h3><p><a href="https://gitee.com/lzl2040/pic-store/raw/master/blog/5/bingchaji1.png">123</a></p><p>假如我们要根据F找到它的祖先，我们先是找到它的父节点C，然后再找到C的父节点A，此时它就是F的祖先了。</p><p>算法怎么实现呢？可以定义一个数组，表示当前节点的父节点是谁，初始化都为本身节点，然后不断往回推就行。</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归版本</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> parent[])</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(parent[x] == x)&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> find(parent[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环版本</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> parent[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x != parent[x])&#123;</span><br><span class="line">        x = parent[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="合并-Union"><a href="#合并-Union" class="headerlink" title="合并-Union"></a>合并-Union</h3><p>另一段集合</p><p><a href="https://gitee.com/lzl2040/pic-store/raw/master/blog/5/bingchaji2.png">123</a></p><p>假设A集合也是在集合当中，即节点A的父节点其实是G节点，这个时候我们就需要合并这两个集合了。</p><p>这个其实比较简单，我们先找到A集合的根节点，然后找到另外一个集合的根节点G，然后设置A集合的父节点为G即可。</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> parent[])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> parent_x = find(x);</span><br><span class="line">    <span class="keyword">int</span> parent_y = find(y);</span><br><span class="line">    parent[parent_x] = parent_y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>合并后的结构如下:</p><p><a href="https://gitee.com/lzl2040/pic-store/raw/master/blog/5/bingchaji3.png">123</a></p><h3 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h3><p>我们发现，当树的高度很高时，我们查询的效率就比较慢，故要进行路径压缩。</p><p>我们可以将每个节点的父节点都指向根节点，这样就十分方便了。</p><p>代码优化后的情形：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> parent[])</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(parent[x] == x)&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">    parent[x] = find(parent[x]);</span><br><span class="line"><span class="keyword">return</span> parent[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="七段码"><a href="#七段码" class="headerlink" title="七段码"></a>七段码</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>小蓝要用七段码数码管来表示一种特殊的文字。</p><p><a href="https://doc.shiyanlou.com/courses/uid1580206-20210312-1615527941739"></a></p><p>上图给出了七段码数码管的一个图示，数码管中一共有 7 段可以发光的二 极管，分别标记为 <em>a</em>,<em>b</em>,<em>c</em>,<em>d</em>,<em>e</em>,<em>f</em>,<em>g</em>。</p><p>小蓝要选择一部分二极管（至少要有一个）发光来表达字符。在设计字符 的表达时，要求所有发光的二极管是连成一片的。</p><p>例如：<em>b</em> 发光，其他二极管不发光可以用来表达一种字符。</p><p>例如 <em>c</em> 发光，其他二极管不发光可以用来表达一种字符。这种方案与上 一行的方案可以用来表示不同的字符，尽管看上去比较相似。</p><p>例如：<em>a</em>,<em>b</em>,<em>c</em>,<em>d</em>,<em>e</em> 发光， <em>f</em>,<em>g</em> 不发光可以用来表达一种字符。</p><p>例如：<em>b</em>,<em>f</em> 发光，其他二极管不发光则不能用来表达一种字符，因为发光 的二极管没有连成一片。</p><p>请问，小蓝可以用七段码数码管表达多少种不同的字符？</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> map[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> parent[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> vis[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        initMap();</span><br><span class="line">        dfs(<span class="number">1</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">      add(<span class="number">1</span>,<span class="number">2</span>); add(<span class="number">1</span>,<span class="number">6</span>);</span><br><span class="line">      add(<span class="number">2</span>,<span class="number">3</span>); add(<span class="number">2</span>,<span class="number">7</span>);</span><br><span class="line">      add(<span class="number">3</span>,<span class="number">4</span>); add(<span class="number">3</span>,<span class="number">7</span>);</span><br><span class="line">      add(<span class="number">4</span>,<span class="number">5</span>); add(<span class="number">5</span>,<span class="number">6</span>); add(<span class="number">5</span>,<span class="number">7</span>);</span><br><span class="line">      add(<span class="number">6</span>,<span class="number">7</span>); add(<span class="number">6</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">      map[x][y] = map[y][x] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(parent[x] == x)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;</span><br><span class="line">      parent[x] = find(parent[x]);</span><br><span class="line">      <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(x &gt;= <span class="number">8</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check())&#123;</span><br><span class="line">          res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//数码管被选中</span></span><br><span class="line">      vis[x] = <span class="keyword">true</span>;</span><br><span class="line">      dfs(x+<span class="number">1</span>);</span><br><span class="line">      vis[x] = <span class="keyword">false</span>;</span><br><span class="line">      <span class="comment">//该数码管不被选中</span></span><br><span class="line">      dfs(x+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">7</span>;i++)&#123;</span><br><span class="line">        parent[i] = i;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//合并</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">7</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">7</span>;j++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(vis[i] &amp;&amp; vis[j] &amp;&amp; map[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">            parent[find(j)] = find(i);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//找根的个数,发光二极管的连通区域个数</span></span><br><span class="line">      <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">7</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(parent[i] == i &amp;&amp; vis[i])&#123;</span><br><span class="line">          count++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(count == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;p&gt;假设这么一种场景：突然有一天，你发现你和你的同桌原来有着很薄的亲戚关系，很久很久以前你们有一个共同的祖先，那么要怎么判断你和他的家族其实是同</summary>
      
    
    
    
    <category term="算法笔记" scheme="https://lzl2040.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="算法" scheme="https://lzl2040.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java-BigInteger使用</title>
    <link href="https://lzl2040.github.io/2022/02/01/Java-BigInteger%E4%BD%BF%E7%94%A8/"/>
    <id>https://lzl2040.github.io/2022/02/01/Java-BigInteger%E4%BD%BF%E7%94%A8/</id>
    <published>2022-02-01T09:11:45.000Z</published>
    <updated>2022-02-01T09:31:58.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>当使用的数据范围要超过long时,我们可以使用BigInteger来表示这些超范围的整数。</p><p>事实上，它是使用一个int数组来模拟一个非常大的整数。</p><h2 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BigInteger num = <span class="keyword">new</span> BigInteger(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">BigInteger b=BigInteger.valueOf(<span class="number">123</span>);</span><br></pre></td></tr></table></figure><h2 id="运算方法"><a href="#运算方法" class="headerlink" title="运算方法"></a>运算方法</h2><p>BigInteger使用add,subtract,multiply,divide这些方法来实现加减乘除。</p><p>如:a = a + b表示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = a.add(b);</span><br></pre></td></tr></table></figure><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>比较耗时，如果是做算法类的竞赛容易超时。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>你一定听说过这个故事。国王对发明国际象棋的大臣很佩服，问他要什么报酬，大臣说：请在第 1 个棋盘格放 1 粒麦子，在第 2 个棋盘格放 2 粒麦子，在第 3 个棋盘格放 4 粒麦子，在第 4 个棋盘格放 8 粒麦子，……后一格的数字是前一格的两倍，直到放完所有棋盘格（国际象棋共有 64 格）。</p><p>国王以为他只是想要一袋麦子而已，哈哈大笑。</p><p>当时的条件下无法准确计算，但估算结果令人吃惊：即使全世界都铺满麦子也不够用！</p><p>请你借助计算机准确地计算，到底需要多少粒麦子。</p><p>具体可参照<a href="https://www.lanqiao.cn/problems/739/learning/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhY2Nlc3NfcmVzb3VyY2UiLCJleHAiOjE2NDM3MDM5MjQsImciOiJKcEs2VFFxNndjS1dXM1QzIiwiaWF0IjoxNjQzNzAzNjI0LCJ1c2VySWQiOjY2NTg1MDQ4fQ.ZlnQ9EXhO-IpgWEM84DlpoHxV6z-G50JZqWcRoDz5NM">蓝桥杯题目</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        BigInteger res = <span class="keyword">new</span> BigInteger(<span class="number">0</span>+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        BigInteger mid = <span class="keyword">new</span> BigInteger(<span class="number">1</span>+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">64</span>;i ++)&#123;</span><br><span class="line">          res = res.add(mid);</span><br><span class="line">          mid = mid.multiply(<span class="keyword">new</span> BigInteger(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用说明&quot;&gt;&lt;a href=&quot;#使用说明&quot; class=&quot;headerlink&quot; title=&quot;使用说明&quot;&gt;&lt;/a&gt;使用说明&lt;/h2&gt;&lt;p&gt;当使用的数据范围要超过long时,我们可以使用BigInteger来表示这些超范围的整数。&lt;/p&gt;
&lt;p&gt;事实上，它是使用一</summary>
      
    
    
    
    <category term="笔记" scheme="https://lzl2040.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="java" scheme="https://lzl2040.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>matlab编程笔记</title>
    <link href="https://lzl2040.github.io/2022/01/27/matlab%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <id>https://lzl2040.github.io/2022/01/27/matlab%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-27T09:39:03.000Z</published>
    <updated>2022-02-01T09:28:41.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美赛期间使用matlab的一些笔记"><a href="#美赛期间使用matlab的一些笔记" class="headerlink" title="美赛期间使用matlab的一些笔记"></a>美赛期间使用matlab的一些笔记</h1><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a><strong>字符串比较</strong></h3><p>​    strcmp函数</p><h3 id="cell类型转换为字符串"><a href="#cell类型转换为字符串" class="headerlink" title="cell类型转换为字符串"></a><strong>cell类型转换为字符串</strong></h3><p>​    txt{i},txt为cell数组</p><h3 id="关于数组的下标引用"><a href="#关于数组的下标引用" class="headerlink" title="关于数组的下标引用"></a><strong>关于数组的下标引用</strong></h3><p>a(i,:) 表示第i行</p><p>a(:,i) 表示第i列</p><p>a(i:j,:) 表示第i行到第j列</p><h3 id="将数据写入文件"><a href="#将数据写入文件" class="headerlink" title="将数据写入文件"></a><strong>将数据写入文件</strong></h3><p>xlswrite<br>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% 写入字符串类型或者cell类型,比如日期,字符串等</span></span><br><span class="line">txt2 = &#123;<span class="string">&quot;经度&quot;</span>,<span class="string">&quot;纬度&quot;</span>&#125;;</span><br><span class="line">xlswrite(<span class="string">&#x27;position_data.xlsx&#x27;</span>,txt2);<span class="comment">%txt2为字符类型的</span></span><br><span class="line">datas_position = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>;<span class="number">2</span> <span class="number">3</span> <span class="number">5</span>;<span class="number">5</span> <span class="number">6</span> <span class="number">7</span>];</span><br><span class="line">xlswrite(<span class="string">&#x27;position_data.xlsx&#x27;</span>,datas_position,<span class="string">&#x27;C2:E4&#x27;</span>);<span class="comment">% C2:E4是写入的位置</span></span><br></pre></td></tr></table></figure><h3 id="生成字符数组"><a href="#生成字符数组" class="headerlink" title="生成字符数组"></a><strong>生成字符数组</strong></h3><p>使用函数strings</p><p>示例:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">positive = strings(<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="对日期的计算"><a href="#对日期的计算" class="headerlink" title="对日期的计算"></a><strong>对日期的计算</strong></h3><p>使用datenum函数,它会将日期转换为天数(具体起始时间我也不是很清楚)</p><p>示例:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">format = <span class="string">&#x27;yyyy/mm/dd&#x27;</span>;<span class="comment">%它的格式</span></span><br><span class="line">datenum(<span class="string">&#x27;2020/3/4&#x27;</span>,format) - datenum(<span class="string">&#x27;2020/3/1&#x27;</span>,format)</span><br></pre></td></tr></table></figure><h3 id="排序问题"><a href="#排序问题" class="headerlink" title="排序问题"></a><strong>排序问题</strong></h3><p>主要是涉及有多个数据项的时候，即我根据某一个数据项进行排序后，其他的数据项也应该按照我这个顺序来，</p><p>使用sortrows函数</p><p>示例:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fit_data = [time_interval position];<span class="comment">%14行3列</span></span><br><span class="line">fit_data = <span class="built_in">sortrows</span>(fit_data,<span class="number">1</span>);<span class="comment">%根据第一列的数据进行升序排序,其他列跟着变</span></span><br></pre></td></tr></table></figure><h3 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a><strong>字符串的拼接</strong></h3><p>使用函数strcat或者利用字符数组的性质。</p><p>示例:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">b = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">c = strcat(a,b);</span><br><span class="line">d = [a,b];</span><br></pre></td></tr></table></figure><p>若是有数字,可用mat2str将数字先转换为函数，如果在strcat直接使用数字的话,数字会被解析为ASCII码对应的字符。</p><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c = strcat(<span class="string">&#x27;A&#x27;</span>,mat2str(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;美赛期间使用matlab的一些笔记&quot;&gt;&lt;a href=&quot;#美赛期间使用matlab的一些笔记&quot; class=&quot;headerlink&quot; title=&quot;美赛期间使用matlab的一些笔记&quot;&gt;&lt;/a&gt;美赛期间使用matlab的一些笔记&lt;/h1&gt;&lt;h3 id=&quot;字符串比较</summary>
      
    
    
    
    <category term="笔记" scheme="https://lzl2040.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="matlab" scheme="https://lzl2040.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯刷题题解</title>
    <link href="https://lzl2040.github.io/2022/01/27/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%88%B7%E9%A2%98%E9%A2%98%E8%A7%A3/"/>
    <id>https://lzl2040.github.io/2022/01/27/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%88%B7%E9%A2%98%E9%A2%98%E8%A7%A3/</id>
    <published>2022-01-27T09:38:38.000Z</published>
    <updated>2022-02-01T09:28:24.288Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="DFS算法"><a href="#DFS算法" class="headerlink" title="DFS算法"></a>DFS算法</h1><h2 id="迷宫-2017年省赛"><a href="#迷宫-2017年省赛" class="headerlink" title="迷宫(2017年省赛)"></a>迷宫(2017年省赛)</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>X 星球的一处迷宫游乐场建在某个小山坡上。它是由 10 \times 1010×10 相互连通的小房间组成的。</p><p>房间的地板上写着一个很大的字母。我们假设玩家是面朝上坡的方向站立，则：</p><ul><li>L<em>L</em> 表示走到左边的房间，</li><li>R<em>R</em> 表示走到右边的房间，</li><li>U<em>U</em> 表示走到上坡方向的房间，</li><li>D<em>D</em> 表示走到下坡方向的房间。</li></ul><p>X 星球的居民有点懒，不愿意费力思考。他们更喜欢玩运气类的游戏。这个游戏也是如此！</p><p>开始的时候，直升机把 100100 名玩家放入一个个小房间内。玩家一定要按照地上的字母移动。</p><p>迷宫地图如下：</p><p>UDDLUULRUL<br>UURLLLRRRU<br>RRUURLDLRD<br>RUDDDDUUUU<br>URUDLLRRUU<br>DURLRLDLRL<br>ULLURLLRDU<br>RDLULLRDDD<br>UUDDUDUDLL<br>ULRDLUURRR</p><p>请你计算一下，最后，有多少玩家会走出迷宫，而不是在里边兜圈子？</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>DFS,每个点都要作为起点一次</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> vis[][] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> res = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> maze[][] = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//在此输入您的代码...</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">          String line = scan.nextLine();</span><br><span class="line">          maze[i] = line.toCharArray();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; <span class="number">10</span>;j++)&#123;</span><br><span class="line">            vis = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">            res = <span class="keyword">false</span>;</span><br><span class="line">            dfs(i,j);</span><br><span class="line">            <span class="keyword">if</span>(res)&#123;</span><br><span class="line">              counts++;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">        System.out.println(counts);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(x == -<span class="number">1</span> || x == <span class="number">10</span> || y == -<span class="number">1</span> || y == <span class="number">10</span>)&#123;</span><br><span class="line">        res = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(vis[x][y])&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      vis[x][y]=<span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">if</span>(maze[x][y] == <span class="string">&#x27;U&#x27;</span>)&#123;</span><br><span class="line">        dfs(x-<span class="number">1</span>,y);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(maze[x][y] == <span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">        dfs(x+<span class="number">1</span>,y);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(maze[x][y] == <span class="string">&#x27;L&#x27;</span>)&#123;</span><br><span class="line">        dfs(x,y-<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(maze[x][y] == <span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">        dfs(x,y+<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方格-2017年省赛"><a href="#方格-2017年省赛" class="headerlink" title="方格(2017年省赛)"></a>方格(2017年省赛)</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>6x6的方格，沿着格子的边线剪开成两部分。 要求这两部分的形状完全相同。</p><p>如下就是三种可行的分割法。</p><p><img src="https://doc.shiyanlou.com/courses/uid1580206-20210317-1615964222859" alt="图片描述"></p><p><img src="https://doc.shiyanlou.com/courses/uid1580206-20210317-1615964217192" alt="图片描述"></p><p><img src="https://doc.shiyanlou.com/courses/uid1580206-20210317-1615964210676" alt="图片描述"></p><p>试计算： 包括这 33 种分法在内，一共有多少种不同的分割方法。 注意：旋转对称的属于同一种分割法。</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>每次从中心点(3,3)开始遍历,到达边界即说明已经分割完毕(我也不是很理解)</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> dirX[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> dirY[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] maze = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">7</span>][<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        maze[<span class="number">3</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">        dfs(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.print(counts/<span class="number">4</span>);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(x == <span class="number">0</span> || y == <span class="number">0</span> || x == <span class="number">6</span> || y == <span class="number">6</span>)&#123;</span><br><span class="line">        counts++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> nx = dirX[i] + x;</span><br><span class="line">        <span class="keyword">int</span> ny = dirY[i] + y;</span><br><span class="line">        <span class="keyword">if</span>(maze[nx][ny] == <span class="number">0</span>)&#123;</span><br><span class="line">          maze[nx][ny] = <span class="number">1</span>;</span><br><span class="line">          maze[<span class="number">6</span>-nx][<span class="number">6</span>-ny]=<span class="number">1</span>;</span><br><span class="line">          dfs(nx,ny);</span><br><span class="line">          maze[nx][ny] = <span class="number">0</span>;</span><br><span class="line">          maze[<span class="number">6</span>-nx][<span class="number">6</span>-ny]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="正则问题-2017年省赛"><a href="#正则问题-2017年省赛" class="headerlink" title="正则问题(2017年省赛)"></a>正则问题(2017年省赛)</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>考虑一种简单的正则表达式：</p><p>只由 x ( ) | 组成的正则表达式。</p><p>小明想求出这个正则表达式能接受的最长字符串的长度。</p><p>例如 ((xx|xxx)x|(x|xx))xx 能接受的最长字符串是： xxxxxx，长度是 6。</p><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>深度优先搜索DFS，注意分隔符’(‘,’)’以及|这几种情况。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> index = <span class="number">0</span>,len;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String s = scan.nextLine();</span><br><span class="line">        <span class="keyword">char</span> chs[] = s.toCharArray();</span><br><span class="line">        len = s.length();</span><br><span class="line">        System.out.println(dfs(chs));</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span> chs[])</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>(index &lt; len)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chs[index] == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">          index++;</span><br><span class="line">          temp += dfs(chs);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(chs[index] == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">          index++;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(chs[index] == <span class="string">&#x27;|&#x27;</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span>(temp &gt; max)&#123;</span><br><span class="line">            max = temp;</span><br><span class="line">          &#125;</span><br><span class="line">          index++;</span><br><span class="line">          temp = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          index++;</span><br><span class="line">          temp++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(temp &gt; max)&#123;</span><br><span class="line">        max = temp;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="受伤的皇后"><a href="#受伤的皇后" class="headerlink" title="受伤的皇后"></a>受伤的皇后</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>有一个  <em>n</em>×<em>n</em> 的国际象棋棋盘（<em>n</em> 行 n* 列的方格图），请在棋盘中摆放 <em>n</em> 个受伤的国际象棋皇后，要求：</p><ol><li>任何两个皇后不在同一行。</li><li>任何两个皇后不在同一列。</li><li>如果两个皇后在同一条 45 度角的斜线上，这两个皇后之间行号的差值至少为 3 。</li></ol><p>请问一共有多少种摆放方案。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第一行包含一个整数 <em>n</em>。</p><p>其中，1≤<em>n</em>≤10。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数，表示答案。</p><h3 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h3><p>求方案数目,很容易想到深度优先搜索,不过这里要<strong>注意对角线情况的标记</strong>，这里我们进行了状态压缩。</p><p>首先注意每一行都要有一个皇后，这就决定了在<strong>深度遍历时只要行数递增</strong>即可，然后在每一行遍历每一列，判断该格子是否满足摆放要求。满足要求则进入下一行，直到皇后数等于n为止。</p><p>关于判断是否满足摆放要求，这里进行了类似于状态压缩的方法，比如：</p><ul><li>如果第一列已经被遍历了，那么col[i]就等于true,说明这一列已经被遍历了，而不是这一列的所有元素都标记为true</li><li>对于对角线的情况，我们研究它的直线方程，对于正对角线，它的直线方程一般是:x - y = m,那么我们就用这个m来指代这一条直线上的点的情况，但是要注意x - y可能是负数，所以要改为x - y + n；相似的，对于反对角线，它的直线方程一般是:x+y = m,那么我们就用这个m来指代这一条直线上的点的情况。(x是行的位置，y是列的位置)</li></ul><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> col[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> duijiao[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> duijiao2[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        n = scan.nextInt();</span><br><span class="line">        <span class="comment">//深度优先搜索</span></span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">        System.out.println(counts);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(step == n)&#123;</span><br><span class="line">        counts++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!col[i] &amp;&amp; !duijiao[step - i + n] &amp;&amp; !duijiao2[step + i])&#123;</span><br><span class="line">          col[i] = <span class="keyword">true</span>;</span><br><span class="line">          duijiao[step - i + n] = <span class="keyword">true</span>;</span><br><span class="line">          duijiao2[step + i] = <span class="keyword">true</span>;</span><br><span class="line">          dfs(step + <span class="number">1</span>);</span><br><span class="line">          col[i] = <span class="keyword">false</span>;</span><br><span class="line">          duijiao[step - i + n] = <span class="keyword">false</span>;</span><br><span class="line">          duijiao2[step + i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="灌溉-2021模拟"><a href="#灌溉-2021模拟" class="headerlink" title="灌溉(2021模拟)"></a>灌溉(2021模拟)</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>小蓝负责花园的灌溉工作。</p><p>花园可以看成一个 <em>n</em> 行 m* 列的方格图形。中间有一部分位置上安装有出水管。</p><p>小蓝可以控制一个按钮同时打开所有的出水管，打开时，有出水管的位置可以被认为已经灌溉好。</p><p>每经过一分钟，水就会向四面扩展一个方格，被扩展到的方格可以被认为已经灌溉好。即如果前一分钟某一个方格被灌溉好，则下一分钟它上下左右的四个方格也被灌溉好。</p><p>给定花园水管的位置，请问 <em>k</em> 分钟后，有多少个方格被灌溉好？</p><h3 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第一行包含两个整数 <em>n</em>,<em>m</em>。</p><p>第二行包含一个整数 t<em>t</em>，表示出水管的数量。</p><p>接下来 t<em>t</em> 行描述出水管的位置，其中第 i<em>i</em> 行包含两个数 <em>r</em>,<em>c</em> 表示第 <em>r</em> 行第 c* 列有一个排水管。</p><p>接下来一行包含一个整数 k*。</p><p>其中，1≤<em>n</em>,<em>m</em>≤100,1≤<em>t</em>≤10,1≤<em>k</em>≤100。</p><h3 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数，表示答案。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>典型的深度优先搜索。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> line[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> column[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>]; </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> vis[][] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> dirX[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> dirY[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//在此输入您的代码...</span></span><br><span class="line">        n = scan.nextInt();</span><br><span class="line">        m = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> t = scan.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t;i++)&#123;</span><br><span class="line">          line[i] = scan.nextInt();</span><br><span class="line">          column[i] = scan.nextInt();</span><br><span class="line">          vis[line[i]-<span class="number">1</span>][column[i]-<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> k = scan.nextInt();</span><br><span class="line">        <span class="comment">//dfs</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; t;i++)&#123;</span><br><span class="line">          dfs(line[i]-<span class="number">1</span>,column[i]-<span class="number">1</span>,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[i][j])&#123;</span><br><span class="line">              counts++;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(counts);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</span><br><span class="line">        vis[x][y] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      vis[x][y] = <span class="keyword">true</span>;</span><br><span class="line">      <span class="comment">//四个方向</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> nx = x + dirX[i];</span><br><span class="line">        <span class="keyword">int</span> ny = y + dirY[i];</span><br><span class="line">        <span class="keyword">if</span>(nx &gt;=<span class="number">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &gt;=<span class="number">0</span> &amp;&amp; ny &lt; m)&#123;</span><br><span class="line">          dfs(nx,ny,k-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排列小球-2021年模拟"><a href="#排列小球-2021年模拟" class="headerlink" title="排列小球(2021年模拟)"></a>排列小球(2021年模拟)</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>小蓝有黄绿蓝三种颜色的小球，分别为 <em>R</em>,<em>G</em>,<em>B</em> 个。同样颜色的小球没有区别。</p><p>小蓝将这些小球从左到右排成一排，排完后，将最左边的连续同色小球个数记为 <em>t</em>1，将接下来的连续小球个数记为 <em>t</em>2，以此类推直到最右边的小球。</p><p>请问，总共有多少总摆放小球的方案，使得t<em>1,<em>t</em>2,⋯ 为严格单调递增序列，即 t</em>1≤<em>t</em>2≤<em>t</em>3≤⋯。</p><h3 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入一行包含三个整数R*,<em>G</em>,<em>B</em>。</p><p>其中，0≤<em>R</em>,<em>G</em>,<em>B</em>≤50。。</p><h3 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数，表示答案。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>关于严格单调递增，应该是t1 &lt; t2 &lt; t3没有等号的。然后这就是一个典型的深度优先搜索，难点在于怎么进行深度遍历。</p><p>我们可以在进行深度遍历的时候提供一个状态量，用来记录上一次的小球是哪一种颜色，然后在当前遍历中判断所选的球是否跟上一次选择的颜色一样，如果一样则跳过，不一样则再递归遍历。</p><p>在遍历的同时，如何判断递归退出并且方案数目增加呢？我们可以用球的总数是否为0来判断，每次深度遍历球的总数都要减去当前选择的球数，同时注意下一次选择的球数要增加，因为是递增的。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> color[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//在此输入您的代码...</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i++)&#123;</span><br><span class="line">          color[i] = scan.nextInt();</span><br><span class="line">          sum += color[i];</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(sum,-<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        System.out.println(counts);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> sum,<span class="keyword">int</span> pre,<span class="keyword">int</span> next)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(sum == <span class="number">0</span>)&#123;</span><br><span class="line">        counts++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == pre)&#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = next + <span class="number">1</span>;j &lt;= color[i];j++)&#123;</span><br><span class="line">          color[i] -=j;</span><br><span class="line">          <span class="keyword">if</span>(sum &gt;= j)&#123;</span><br><span class="line">            dfs(sum - j,i,j);</span><br><span class="line">          &#125;</span><br><span class="line">          color[i] +=j;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><h2 id="分巧克力-2017省赛"><a href="#分巧克力-2017省赛" class="headerlink" title="分巧克力(2017省赛)"></a>分巧克力(2017省赛)</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>儿童节那天有 K 位小朋友到小明家做客。小明拿出了珍藏的巧克力招待小朋友们。</p><p>小明一共有 N<em>N</em> 块巧克力，其中第 i<em>i</em> 块是 H_i \times Wi<em>H**i</em>×<em>W**i</em> 的方格组成的长方形。为了公平起见，</p><p>小明需要从这 N<em>N</em> 块巧克力中切出 K 块巧克力分给小朋友们。切出的巧克力需要满足：</p><ol><li>形状是正方形，边长是整数;</li><li>大小相同;</li></ol><p>例如一块 6x5 的巧克力可以切出 6 块 2x2 的巧克力或者 2 块 3x3 的巧克力。</p><p>当然小朋友们都希望得到的巧克力尽可能大，你能帮小明计算出最大的边长是多少么？</p><h3 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述"></a>输入描述</h3><p>第一行包含两个整数 N,K<em>N</em>,<em>K</em> (1 \leq N, K \leq 10^51≤<em>N</em>,<em>K</em>≤105)。</p><p>以下 N 行每行包含两个整数 H_i,W_i<em>H**i</em>,<em>W**i</em> (1 \leq H_i, W_i \leq 10^51≤<em>H**i</em>,<em>W**i</em>≤105)。</p><p>输入保证每位小朋友至少能获得一块 1x1 的巧克力。</p><h3 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出切出的正方形巧克力最大可能的边长。</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>因为是找边长，我们很容易想到暴力求解，即:遍历1-10000，但是对于这种<strong>顺序找数字</strong>的问题，我们可以使用二分法，从0-10000中进行二分，找到合适的边长。<strong>二分法注意边界的取法</strong></p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> N = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> K = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> H[] = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> W[] = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">          H[i] = scan.nextInt();</span><br><span class="line">          W[i] = scan.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//二分法</span></span><br><span class="line">        <span class="keyword">int</span> minBorderLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxBorderLen = <span class="number">100000</span>;</span><br><span class="line">        <span class="keyword">int</span> finalBorderLen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(minBorderLen &lt;= maxBorderLen)&#123;</span><br><span class="line">          <span class="keyword">int</span> midBorderLen = (minBorderLen + maxBorderLen) / <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = (H[i] / midBorderLen) * (W[i] / midBorderLen);</span><br><span class="line">            sum += num;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span>(sum &gt;= K)&#123;</span><br><span class="line">            minBorderLen = midBorderLen + <span class="number">1</span>;</span><br><span class="line">            finalBorderLen = midBorderLen;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            maxBorderLen = midBorderLen - <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(finalBorderLen);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="包子凑数"><a href="#包子凑数" class="headerlink" title="包子凑数"></a>包子凑数</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p>小明几乎每天早晨都会在一家包子铺吃早餐。他发现这家包子铺有 N<em>N</em> 种蒸笼，其中第 i<em>i</em> 种蒸笼恰好能放 A_i<em>A**i</em> 个包子。每种蒸笼都有非常多笼，可以认为是无限笼。</p><p>每当有顾客想买 X<em>X</em> 个包子，卖包子的大叔就会迅速选出若干笼包子来，使得这若干笼中恰好一共有 X<em>X</em> 个包子。比如一共有 3 种蒸笼，分别能放 3、4 和 5 个包子。当顾客想买 11 个包子时，大叔就会选 2 笼 3 个的再加 1 笼 5 个的（也可能选出 1 笼 3 个的再加 2 笼 4 个的）。</p><p>当然有时包子大叔无论如何也凑不出顾客想买的数量。比如一共有 3 种蒸笼，分别能放 4、5 和 6 个包子。而顾客想买 7 个包子时，大叔就凑不出来了。</p><p>小明想知道一共有多少种数目是包子大叔凑不出来的。</p><h3 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述"></a>输入描述</h3><p>第一行包含一个整数 N<em>N</em> (1 \leq N \leq 1001≤<em>N</em>≤100)。</p><p>以下 N 行每行包含一个整数 A_i<em>A**i</em> (1 \leq A_i \leq 1001≤<em>A**i</em>≤100)。</p><h3 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述"></a>输出描述</h3><p>一个整数代表答案。如果凑不出的数目有无限多个，输出 INF。</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>第一眼感觉是<strong>完全背包问题</strong>，事实确实是的。只不过先要判断输入数据的<strong>最大公约数是否为1</strong>。</p><p>至于为什么判断的条件要是1，这是因为只有所有数据的最大公约数是1，则凑出的数目就没有约数的限制了。</p><p>如:假如数据是4,6,则凑出的数目就有个限制，它的公约数得含有2，则奇数它是无法凑出的，而奇数有无限多个。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> N = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> volume[] = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> dp[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10001</span>];</span><br><span class="line">        <span class="keyword">int</span> common;</span><br><span class="line">        volume[<span class="number">0</span>] = scan.nextInt();</span><br><span class="line">        common = volume[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; N;i++)&#123;</span><br><span class="line">          volume[i] = scan.nextInt();</span><br><span class="line">          common = gcd(common,volume[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(common != <span class="number">1</span>)&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;INF&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">//初始化</span></span><br><span class="line">          </span><br><span class="line">          dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;volume[i] + j &lt;= <span class="number">10000</span>;j++)&#123;</span><br><span class="line">              <span class="keyword">if</span>(dp[j] == <span class="number">1</span>)&#123;                             <span class="comment">//说明这个也可以根据组合得到</span></span><br><span class="line">                dp[volume[i] + j] = <span class="number">1</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10000</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i] == <span class="number">0</span>)&#123;</span><br><span class="line">              counts++;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          System.out.println(counts);</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(a % b != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = a % b;</span><br><span class="line">        <span class="keyword">if</span>(mid == <span class="number">0</span>)&#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a = b;</span><br><span class="line">        b = mid;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="思维"><a href="#思维" class="headerlink" title="思维"></a>思维</h1><h2 id="删除字符"><a href="#删除字符" class="headerlink" title="删除字符"></a>删除字符</h2><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个单词，请问在单词中删除 t<em>t</em> 个字母后，能得到的字典序最小的单词是什么？</p><h3 id="输入描述-5"><a href="#输入描述-5" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第一行包含一个单词，由大写英文字母组成。</p><p>第二行包含一个正整数 t<em>t</em>。</p><p>其中，单词长度不超过 100100，t<em>t</em> 小于单词长度。</p><h3 id="输出描述-5"><a href="#输出描述-5" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个单词，表示答案。</p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>这个得搞清楚什么是字典序，这个其实是用来比较字符串大小时可能用到的，如abcde的字典序大于aabcd的字典序，怎么比的呢？</p><p>先比较a,a是相同的，然后比较第二个字符，b&gt;a说明第一个字典序比第二个大。</p><p>理解了字典序后，这题就比较简单了，我们得先判断当前字母是不是字典序最小的，这个可以将它与它后面的字母进行比较，如果不是最小的，则将它删除掉，最后删除t个字母就结束。</p><p>最后得到的结果就是答案了。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String ss = scan.nextLine();</span><br><span class="line">        <span class="keyword">int</span> t = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> len = ss.length();</span><br><span class="line">        <span class="keyword">char</span> chs[] = ss.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isDelete[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[len+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len; i++)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>;j &lt; len;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(chs[i] &gt; chs[j])&#123;</span><br><span class="line">              isDelete[i] = <span class="keyword">true</span>;</span><br><span class="line">              counts ++;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span>(counts == t)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(!isDelete[i])&#123;</span><br><span class="line">            System.out.print(chs[i]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="货物摆放-2021省赛"><a href="#货物摆放-2021省赛" class="headerlink" title="货物摆放(2021省赛)"></a>货物摆放(2021省赛)</h2><h3 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h3><p>小蓝有一个超大的仓库，可以摆放很多货物。</p><p>现在，小蓝有 <em>n</em> 箱货物要摆放在仓库，每箱货物都是规则的正方体。小蓝规定了长、宽、高三个互相垂直的方向，每箱货物的边都必须严格平行于长、宽、高。</p><p>小蓝希望所有的货物最终摆成一个大的长方体。即在长、宽、高的方向上分别堆 <em>L</em>、<em>W</em>、<em>H</em> 的货物,满足 n*=<em>L</em>×<em>W</em>×*H。</p><p>给定 <em>n</em>，请问有多少种堆放货物的方案满足要求。</p><p>例如，当 n = 4<em>n</em>=4 时，有以下 66 种方案：1×1×4、1×2×2、1×4×1、2×1×2、2 × 2 × 1、4 × 1 × 11×1×4、1×2×2、1×4×1、2×1×2、2×2×1、4×1×1。</p><p>请问，当 n*=2021041820210418 （注意有 1616 位数字）时，总共有多少种方案？</p><p>提示：建议使用计算机编程解决问题。</p><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>第一次做的时候是懵的，被这么大的数吓住了，其实这个用Long就行了，然后算出该数的因数，最后三层循环遍历即可。</p><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//在此输入您的代码...</span></span><br><span class="line">        Long num = <span class="keyword">new</span> Long(<span class="string">&quot;2021041820210418&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">        List&lt;Long&gt; yinzi = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> i = <span class="number">1</span>; i * i &lt;= num;i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(num % i == <span class="number">0</span>)&#123;</span><br><span class="line">            yinzi.add(i);</span><br><span class="line">            <span class="keyword">if</span>(num / i != i)&#123;</span><br><span class="line">              yinzi.add(num/i);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> i:yinzi)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">long</span> j:yinzi)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">long</span> t:yinzi)&#123;</span><br><span class="line">              <span class="keyword">if</span>(i * j * t == num)&#123;</span><br><span class="line">                res++;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;DFS算法&quot;&gt;&lt;a href=&quot;#DFS算法&quot; class=&quot;headerlink&quot; title=&quot;DFS算法&quot;&gt;&lt;/a&gt;DFS算法&lt;/h1&gt;&lt;h2 id=&quot;迷宫-2017年省赛&quot;&gt;&lt;a href=&quot;#迷宫-2017年省赛&quot; class=</summary>
      
    
    
    
    <category term="题解" scheme="https://lzl2040.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="蓝桥杯" scheme="https://lzl2040.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo部署博客项目</title>
    <link href="https://lzl2040.github.io/2022/01/27/Hexo%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"/>
    <id>https://lzl2040.github.io/2022/01/27/Hexo%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-01-27T09:37:59.000Z</published>
    <updated>2022-02-01T09:28:30.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo使用教程"><a href="#hexo使用教程" class="headerlink" title="hexo使用教程"></a>hexo使用教程</h1><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><h3 id="1-创建博客项目"><a href="#1-创建博客项目" class="headerlink" title="1.创建博客项目"></a>1.创建博客项目</h3><p>使用命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init 项目名称</span><br></pre></td></tr></table></figure><h3 id="2-创建一篇新的博客"><a href="#2-创建一篇新的博客" class="headerlink" title="2.创建一篇新的博客"></a>2.创建一篇新的博客</h3><p>使用命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &#x27;文章名&#x27;</span><br></pre></td></tr></table></figure><h3 id="3-生成静态文件"><a href="#3-生成静态文件" class="headerlink" title="3.生成静态文件"></a>3.生成静态文件</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h3 id="4-部署远程仓库"><a href="#4-部署远程仓库" class="headerlink" title="4.部署远程仓库"></a>4.部署远程仓库</h3><p>找到config.yml文件,在其最下面找到deploy项目,加入如下:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:yourName/yourName.github.io.git # 码云仓库</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="5-部署到GitHub上"><a href="#5-部署到GitHub上" class="headerlink" title="5.部署到GitHub上"></a>5.部署到GitHub上</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这样，一个hexo博客项目就被部署到GitHub上了。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-extends-includes-layout-pug-block-content-include-includes-mixins-post-ui-pug-recent-posts-recent-posts-postUI-include-includes-pagination-pug"><a href="#1-extends-includes-layout-pug-block-content-include-includes-mixins-post-ui-pug-recent-posts-recent-posts-postUI-include-includes-pagination-pug" class="headerlink" title="1.extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug"></a>1.extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>没有pug文件的渲染库</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>使用命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><p>可能会有warning,但这个问题影响不大,warning通常是npm版本引起的，可以换一个不同的版本。</p><h3 id="2-Deployer-not-found-git"><a href="#2-Deployer-not-found-git" class="headerlink" title="2.Deployer not found: git"></a>2.Deployer not found: git</h3><h4 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h4><p>这是因为deployer程序还没安装</p><h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h4><p>使用命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo使用教程&quot;&gt;&lt;a href=&quot;#hexo使用教程&quot; class=&quot;headerlink&quot; title=&quot;hexo使用教程&quot;&gt;&lt;/a&gt;hexo使用教程&lt;/h1&gt;&lt;h2 id=&quot;使用教程&quot;&gt;&lt;a href=&quot;#使用教程&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="hexo" scheme="https://lzl2040.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>

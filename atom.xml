<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fighting</title>
  
  <subtitle>少年,冲冲冲!</subtitle>
  <link href="https://lzl2040.github.io/atom.xml" rel="self"/>
  
  <link href="https://lzl2040.github.io/"/>
  <updated>2022-09-14T14:31:17.324Z</updated>
  <id>https://lzl2040.github.io/</id>
  
  <author>
    <name>Yxmlzl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>论文笔记-RDE-VOS论文细节记录</title>
    <link href="https://lzl2040.github.io/2022/09/14/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-RDE-VOS%E8%AE%BA%E6%96%87%E7%BB%86%E8%8A%82%E8%AE%B0%E5%BD%95/"/>
    <id>https://lzl2040.github.io/2022/09/14/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-RDE-VOS%E8%AE%BA%E6%96%87%E7%BB%86%E8%8A%82%E8%AE%B0%E5%BD%95/</id>
    <published>2022-09-14T14:18:12.000Z</published>
    <updated>2022-09-14T14:31:17.324Z</updated>
    
    
    
    
    <category term="论文笔记" scheme="https://lzl2040.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Paper Note" scheme="https://lzl2040.github.io/tags/Paper-Note/"/>
    
  </entry>
  
  <entry>
    <title>算法学习笔记-动态规划</title>
    <link href="https://lzl2040.github.io/2022/03/30/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://lzl2040.github.io/2022/03/30/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2022-03-30T15:26:06.000Z</published>
    <updated>2022-03-30T15:28:05.350Z</updated>
    
    
    
    
    <category term="算法笔记" scheme="https://lzl2040.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="算法" scheme="https://lzl2040.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法学习笔记-快速幂</title>
    <link href="https://lzl2040.github.io/2022/03/27/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>https://lzl2040.github.io/2022/03/27/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%BF%AB%E9%80%9F%E5%B9%82/</id>
    <published>2022-03-27T13:18:52.000Z</published>
    <updated>2022-03-27T13:40:34.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;h2 id=&quot;例题&quot;&gt;&lt;a href=&quot;#例题&quot; class=&quot;headerlink&quot; title=&quot;例题&quot;&gt;&lt;/a&gt;例题&lt;/h2&gt;</summary>
      
    
    
    
    <category term="算法笔记" scheme="https://lzl2040.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="算法" scheme="https://lzl2040.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>2022(美赛)MCM总结</title>
    <link href="https://lzl2040.github.io/2022/02/22/2022-%E7%BE%8E%E8%B5%9B-MCM%E6%80%BB%E7%BB%93/"/>
    <id>https://lzl2040.github.io/2022/02/22/2022-%E7%BE%8E%E8%B5%9B-MCM%E6%80%BB%E7%BB%93/</id>
    <published>2022-02-22T09:01:20.000Z</published>
    <updated>2022-09-14T14:34:16.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022美国大学生数学建模-MCM-总结"><a href="#2022美国大学生数学建模-MCM-总结" class="headerlink" title="2022美国大学生数学建模(MCM)总结"></a>2022美国大学生数学建模(MCM)总结</h1><h2 id="时间历程"><a href="#时间历程" class="headerlink" title="时间历程"></a>时间历程</h2><h3 id="2-17日"><a href="#2-17日" class="headerlink" title="2.17日"></a>2.17日</h3><p>买的下午2点的车，偷偷去看了一下我亲爱的女朋友，想死她了，心情还是十分舒畅的~~~~，附上吃饭的一张图片</p><p>然后在娄底站等了将近4个小时的火车，终于等到了。感觉从邵东到冷水江不是很方便，汽车也没有直达的，不然直接就坐汽车了。</p><p>到了夜晚将近8点钟，终于到我队友家了，吃了晚饭，然后养精蓄锐准备明天的比赛。</p><h3 id="2-18日"><a href="#2-18日" class="headerlink" title="2.18日"></a>2.18日</h3><p>当天早上5点就起来了，不过腾飞起的太早了困得不行，然后又睡了一会，到9点正式开始这个比赛。</p><p>中间有个很无语的就是，腾飞定了一个闹钟，半夜把我和宇航哥吵醒了，他自己没醒。</p><p>我们先是开始查找资料，最开始选的是C题，对数据进行了稍微处理后就放弃了，觉得没有想象的那么简单，然后我们选择了B题，是一个规划类的问题。好巧不巧，我们国赛也选的是B题。希望美赛和国赛一样有一个比较好的结果吧。</p><p>选好了题目后，我们遇到了一个十分困难的问题，找数据！！！我们是真不会找数据，不过好在老师给选一个题目的建了一个群，我们那个群里的人都共享数据了。看了其他组找数据的速度，我感觉自己就是个菜逼。离谱的是，他们给了我一个网址，我也不知道数据在哪。笑死。还好最后把该找的数据都找到了。</p><p>第一问的数据也是找到夜晚，我倒是没怎么找数据，有些都是宇航哥找的。夜晚对第一问进行了建模，腾飞还说今天把第一问做完，我是比较害怕的，不想在第一天就熬夜，不过实际上只把第一问做完了，因为他熬不住了，笑死。这一天是凌晨1点多左右睡的。</p><h3 id="2-19日"><a href="#2-19日" class="headerlink" title="2.19日"></a>2.19日</h3><p>这一天主要解决了第一问的第二三小问，话说这个第一问就真的劝退了很多人，第一问就有三小问，真的离谱。还好我们的速度还是比较快的，中间经过腾飞不断的微操，我们模型的结果应该也是比较客观的。这一天也不是很累，编程的话按照他写的思路来就好了。只要自己不犯病，应该都不会有很大的问题。这天我们12点多就睡了，也是腾飞熬不住了。</p><h3 id="2-20日"><a href="#2-20日" class="headerlink" title="2.20日"></a>2.20日</h3><p>时间比较紧了，这天我们早上6点多就起来了，开始干这个题目。</p><p>腾飞已经把第二问思路写好了，不过遇到一个麻烦，因为第二问是一个非线性规划的问题，而且他给的不等式的约束条件太过严苛，最后跑不出一个最优解来。</p><p>我用蒙特卡洛算法跑了1000000次，取的随机数没有一个满足条件的，最后用遗传算法稍微有了一点结果，但感觉也不对，希望老师不要发现这个情况。我们不能拘泥于这一个题目，所以结果暂时就这样，之后腾飞就开始写第三问的思路。</p><p>事实上，在做完了第一问之后，其他的题目也就没有这么难了，第三问也是在第一问模型的基础上做了一些修改，等他模型写完，我稍微改一下第三问的结果就出来了。</p><p>最后第四问，就是一个灵敏度分析的问题，我们改了几个参数，然后跑第一问的模型，最后得到了我们最终的结果。至此，我的编程任务差不多结束了。这个时候还比较早的，大概是下午两三点左右。之后就开始着手论文的书写。</p><p>这天夜晚我还是比较轻松的，找一些参考文献什么的，没有什么任务很重的事情。大概在1点钟，我们就睡觉了。</p><h3 id="2-21日"><a href="#2-21日" class="headerlink" title="2.21日"></a>2.21日</h3><p>这一天是最累的一天了，其实到下午的时候我们的论文差不多已经完成了，主体部分的英文也都翻译成了英文，应该也没啥语法错误。</p><p>之后就是噩梦的开始了。我们大概从夜晚11点左右开始翻译摘要，一直到凌晨5点，修改了将近6个小时，终于把这个该死的摘要改完了。主要是论文摘要不能超过一页，但是中文翻译成英文后行数会变多，我们就不得不一直压缩中文，最后终于搞好了。</p><p>最后的部分结果截图：</p><p><img src="https://gitee.com/lzl2040/pic-store/raw/master/blog/6/MCM.png" alt="MCM.png (839×693) (gitee.com)"></p><h3 id="2-22日"><a href="#2-22日" class="headerlink" title="2.22日"></a>2.22日</h3><p>一觉睡到中午11点。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次美赛，让我发现了自己的不足，编程能力还是有待提高的。如果自己编程能力再强一点，可能那个非线性规划就能解决了。</p><p>收获：</p><ul><li>锻炼了自己的编程能力</li><li>对matlab的使用更加熟练</li><li>可能会获得一个比较不错的奖(4月30日)</li></ul><p>反思：</p><ul><li>自己应该多思考一点，不能就按照别人的想法来做</li><li>编程能力有进一步提高</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2022美国大学生数学建模-MCM-总结&quot;&gt;&lt;a href=&quot;#2022美国大学生数学建模-MCM-总结&quot; class=&quot;headerlink&quot; title=&quot;2022美国大学生数学建模(MCM)总结&quot;&gt;&lt;/a&gt;2022美国大学生数学建模(MCM)总结&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="总结" scheme="https://lzl2040.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="matlab" scheme="https://lzl2040.github.io/tags/matlab/"/>
    
    <category term="MCM" scheme="https://lzl2040.github.io/tags/MCM/"/>
    
  </entry>
  
  <entry>
    <title>算法学习笔记-并查集</title>
    <link href="https://lzl2040.github.io/2022/02/09/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>https://lzl2040.github.io/2022/02/09/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B9%B6%E6%9F%A5%E9%9B%86/</id>
    <published>2022-02-09T12:55:10.000Z</published>
    <updated>2022-09-14T14:35:53.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>假设这么一种场景：突然有一天，你发现你和你的同桌原来有着很薄的亲戚关系，很久很久以前你们有一个共同的祖先，那么要怎么判断你和他的家族其实是同一个祖先了？</p><p>这个时候我们肯定想到的是不断往回推，即:我-&gt;我的爸爸-&gt;我的爷爷-&gt;我的爷爷的爸爸…一直往前推，直到出现一个交集，那个就是共同的祖先。</p><p>这个其实就是一种并查集的思想，合并两个集合，就是要找到一个共同的祖先。(这个祖先也可以自己设置)</p><p>从此以后，你们就是一家人了。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>并查集其实是一种树形的数据结构，它主要有两种操作，查找(Find)和合并(Union)。查找就类似于追溯自己的祖先，合并就相当于将两个家族合并，祭拜同一个祖先。这里一个家族就相当于一个集合，并查集主要是处理<strong>集合问题</strong>。</p><p>并查集的用途:</p><ul><li>解决元素分组的问题</li><li>合并不相交的集合</li><li>判断图中是否含有环</li><li>判断连通区域个数</li></ul><h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><h3 id="查找-Find"><a href="#查找-Find" class="headerlink" title="查找-Find"></a>查找-Find</h3><p><img src="https://s1.ax1x.com/2022/09/14/vxmXFA.md.png"></p><p>假如我们要根据F找到它的祖先，我们先是找到它的父节点C，然后再找到C的父节点A，此时它就是F的祖先了。</p><p>算法怎么实现呢？可以定义一个数组，表示当前节点的父节点是谁，初始化都为本身节点，然后不断往回推就行。</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归版本</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> parent[])</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(parent[x] == x)&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> find(parent[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环版本</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> parent[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x != parent[x])&#123;</span><br><span class="line">        x = parent[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="合并-Union"><a href="#合并-Union" class="headerlink" title="合并-Union"></a>合并-Union</h3><p>另一段集合</p><p><img src="https://s1.ax1x.com/2022/09/14/vxmLod.md.png"></p><p>假设A集合也是在集合当中，即节点A的父节点其实是G节点，这个时候我们就需要合并这两个集合了。</p><p>这个其实比较简单，我们先找到A集合的根节点，然后找到另外一个集合的根节点G，然后设置A集合的父节点为G即可。</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> parent[])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> parent_x = find(x);</span><br><span class="line">    <span class="keyword">int</span> parent_y = find(y);</span><br><span class="line">    parent[parent_x] = parent_y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>合并后的结构如下:</p><p><img src="https://s1.ax1x.com/2022/09/14/vxmjJI.md.png"></p><h3 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h3><p>我们发现，当树的高度很高时，我们查询的效率就比较慢，故要进行路径压缩。</p><p>我们可以将每个节点的父节点都指向根节点，这样就十分方便了。</p><p>代码优化后的情形：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> parent[])</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(parent[x] == x)&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">    parent[x] = find(parent[x]);</span><br><span class="line"><span class="keyword">return</span> parent[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="七段码"><a href="#七段码" class="headerlink" title="七段码"></a>七段码</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>小蓝要用七段码数码管来表示一种特殊的文字。</p><p><img src="https://doc.shiyanlou.com/courses/uid1580206-20210312-1615527941739"></p><p>上图给出了七段码数码管的一个图示，数码管中一共有 7 段可以发光的二 极管，分别标记为 <em>a</em>,<em>b</em>,<em>c</em>,<em>d</em>,<em>e</em>,<em>f</em>,<em>g</em>。</p><p>小蓝要选择一部分二极管（至少要有一个）发光来表达字符。在设计字符 的表达时，要求所有发光的二极管是连成一片的。</p><p>例如：<em>b</em> 发光，其他二极管不发光可以用来表达一种字符。</p><p>例如 <em>c</em> 发光，其他二极管不发光可以用来表达一种字符。这种方案与上 一行的方案可以用来表示不同的字符，尽管看上去比较相似。</p><p>例如：<em>a</em>,<em>b</em>,<em>c</em>,<em>d</em>,<em>e</em> 发光， <em>f</em>,<em>g</em> 不发光可以用来表达一种字符。</p><p>例如：<em>b</em>,<em>f</em> 发光，其他二极管不发光则不能用来表达一种字符，因为发光 的二极管没有连成一片。</p><p>请问，小蓝可以用七段码数码管表达多少种不同的字符？</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> map[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> parent[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> vis[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        initMap();</span><br><span class="line">        dfs(<span class="number">1</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">      add(<span class="number">1</span>,<span class="number">2</span>); add(<span class="number">1</span>,<span class="number">6</span>);</span><br><span class="line">      add(<span class="number">2</span>,<span class="number">3</span>); add(<span class="number">2</span>,<span class="number">7</span>);</span><br><span class="line">      add(<span class="number">3</span>,<span class="number">4</span>); add(<span class="number">3</span>,<span class="number">7</span>);</span><br><span class="line">      add(<span class="number">4</span>,<span class="number">5</span>); add(<span class="number">5</span>,<span class="number">6</span>); add(<span class="number">5</span>,<span class="number">7</span>);</span><br><span class="line">      add(<span class="number">6</span>,<span class="number">7</span>); add(<span class="number">6</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">      map[x][y] = map[y][x] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(parent[x] == x)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;</span><br><span class="line">      parent[x] = find(parent[x]);</span><br><span class="line">      <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(x &gt;= <span class="number">8</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check())&#123;</span><br><span class="line">          res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//数码管被选中</span></span><br><span class="line">      vis[x] = <span class="keyword">true</span>;</span><br><span class="line">      dfs(x+<span class="number">1</span>);</span><br><span class="line">      vis[x] = <span class="keyword">false</span>;</span><br><span class="line">      <span class="comment">//该数码管不被选中</span></span><br><span class="line">      dfs(x+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">7</span>;i++)&#123;</span><br><span class="line">        parent[i] = i;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//合并</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">7</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">7</span>;j++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(vis[i] &amp;&amp; vis[j] &amp;&amp; map[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">            parent[find(j)] = find(i);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//找根的个数,发光二极管的连通区域个数</span></span><br><span class="line">      <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">7</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(parent[i] == i &amp;&amp; vis[i])&#123;</span><br><span class="line">          count++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(count == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;p&gt;假设这么一种场景：突然有一天，你发现你和你的同桌原来有着很薄的亲戚关系，很久很久以前你们有一个共同的祖先，那么要怎么判断你和他的家族其实是同</summary>
      
    
    
    
    <category term="算法笔记" scheme="https://lzl2040.github.io/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="算法" scheme="https://lzl2040.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>matlab编程笔记</title>
    <link href="https://lzl2040.github.io/2022/01/27/matlab%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <id>https://lzl2040.github.io/2022/01/27/matlab%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-27T09:39:03.000Z</published>
    <updated>2022-09-14T14:32:51.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美赛期间使用matlab的一些笔记"><a href="#美赛期间使用matlab的一些笔记" class="headerlink" title="美赛期间使用matlab的一些笔记"></a>美赛期间使用matlab的一些笔记</h1><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a><strong>字符串比较</strong></h3><p>​    strcmp函数</p><h3 id="cell类型转换为字符串"><a href="#cell类型转换为字符串" class="headerlink" title="cell类型转换为字符串"></a><strong>cell类型转换为字符串</strong></h3><p>​    txt{i},txt为cell数组</p><h3 id="关于数组的下标引用"><a href="#关于数组的下标引用" class="headerlink" title="关于数组的下标引用"></a><strong>关于数组的下标引用</strong></h3><p>a(i,:) 表示第i行</p><p>a(:,i) 表示第i列</p><p>a(i:j,:) 表示第i行到第j列</p><h3 id="将数据写入文件"><a href="#将数据写入文件" class="headerlink" title="将数据写入文件"></a><strong>将数据写入文件</strong></h3><p>xlswrite<br>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% 写入字符串类型或者cell类型,比如日期,字符串等</span></span><br><span class="line">txt2 = &#123;<span class="string">&quot;经度&quot;</span>,<span class="string">&quot;纬度&quot;</span>&#125;;</span><br><span class="line">xlswrite(<span class="string">&#x27;position_data.xlsx&#x27;</span>,txt2);<span class="comment">%txt2为字符类型的</span></span><br><span class="line">datas_position = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>;<span class="number">2</span> <span class="number">3</span> <span class="number">5</span>;<span class="number">5</span> <span class="number">6</span> <span class="number">7</span>];</span><br><span class="line">xlswrite(<span class="string">&#x27;position_data.xlsx&#x27;</span>,datas_position,<span class="string">&#x27;C2:E4&#x27;</span>);<span class="comment">% C2:E4是写入的位置</span></span><br></pre></td></tr></table></figure><h3 id="生成字符数组"><a href="#生成字符数组" class="headerlink" title="生成字符数组"></a><strong>生成字符数组</strong></h3><p>使用函数strings</p><p>示例:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">positive = strings(<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="对日期的计算"><a href="#对日期的计算" class="headerlink" title="对日期的计算"></a><strong>对日期的计算</strong></h3><p>使用datenum函数,它会将日期转换为天数(具体起始时间我也不是很清楚)</p><p>示例:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">format = <span class="string">&#x27;yyyy/mm/dd&#x27;</span>;<span class="comment">%它的格式</span></span><br><span class="line">datenum(<span class="string">&#x27;2020/3/4&#x27;</span>,format) - datenum(<span class="string">&#x27;2020/3/1&#x27;</span>,format)</span><br></pre></td></tr></table></figure><h3 id="排序问题"><a href="#排序问题" class="headerlink" title="排序问题"></a><strong>排序问题</strong></h3><p>主要是涉及有多个数据项的时候，即我根据某一个数据项进行排序后，其他的数据项也应该按照我这个顺序来，</p><p>使用sortrows函数</p><p>示例:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fit_data = [time_interval position];<span class="comment">%14行3列</span></span><br><span class="line">fit_data = <span class="built_in">sortrows</span>(fit_data,<span class="number">1</span>);<span class="comment">%根据第一列的数据进行升序排序,其他列跟着变</span></span><br></pre></td></tr></table></figure><h3 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a><strong>字符串的拼接</strong></h3><p>使用函数strcat或者利用字符数组的性质。</p><p>示例:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">b = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">c = strcat(a,b);</span><br><span class="line">d = [a,b];</span><br></pre></td></tr></table></figure><p>若是有数字,可用mat2str将数字先转换为函数，如果在strcat直接使用数字的话,数字会被解析为ASCII码对应的字符。</p><p>示例：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c = strcat(<span class="string">&#x27;A&#x27;</span>,mat2str(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;美赛期间使用matlab的一些笔记&quot;&gt;&lt;a href=&quot;#美赛期间使用matlab的一些笔记&quot; class=&quot;headerlink&quot; title=&quot;美赛期间使用matlab的一些笔记&quot;&gt;&lt;/a&gt;美赛期间使用matlab的一些笔记&lt;/h1&gt;&lt;h3 id=&quot;字符串比较</summary>
      
    
    
    
    <category term="笔记" scheme="https://lzl2040.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="matlab" scheme="https://lzl2040.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯刷题题解</title>
    <link href="https://lzl2040.github.io/2022/01/27/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%88%B7%E9%A2%98%E9%A2%98%E8%A7%A3/"/>
    <id>https://lzl2040.github.io/2022/01/27/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%88%B7%E9%A2%98%E9%A2%98%E8%A7%A3/</id>
    <published>2022-01-27T09:38:38.000Z</published>
    <updated>2022-09-14T14:32:34.758Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="DFS算法"><a href="#DFS算法" class="headerlink" title="DFS算法"></a>DFS算法</h1><h2 id="迷宫-2017年省赛"><a href="#迷宫-2017年省赛" class="headerlink" title="迷宫(2017年省赛)"></a>迷宫(2017年省赛)</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>X 星球的一处迷宫游乐场建在某个小山坡上。它是由 10×10 相互连通的小房间组成的。</p><p>房间的地板上写着一个很大的字母。我们假设玩家是面朝上坡的方向站立，则：</p><ul><li><em>L</em> 表示走到左边的房间，</li><li><em>R</em> 表示走到右边的房间，</li><li><em>U</em> 表示走到上坡方向的房间，</li><li><em>D</em> 表示走到下坡方向的房间。</li></ul><p>X 星球的居民有点懒，不愿意费力思考。他们更喜欢玩运气类的游戏。这个游戏也是如此！</p><p>开始的时候，直升机把 100 名玩家放入一个个小房间内。玩家一定要按照地上的字母移动。</p><p>迷宫地图如下：</p><p>UDDLUULRUL<br>UURLLLRRRU<br>RRUURLDLRD<br>RUDDDDUUUU<br>URUDLLRRUU<br>DURLRLDLRL<br>ULLURLLRDU<br>RDLULLRDDD<br>UUDDUDUDLL<br>ULRDLUURRR</p><p>请你计算一下，最后，有多少玩家会走出迷宫，而不是在里边兜圈子？</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>DFS,每个点都要作为起点一次</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> vis[][] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> res = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> maze[][] = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//在此输入您的代码...</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">          String line = scan.nextLine();</span><br><span class="line">          maze[i] = line.toCharArray();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; <span class="number">10</span>;j++)&#123;</span><br><span class="line">            vis = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">            res = <span class="keyword">false</span>;</span><br><span class="line">            dfs(i,j);</span><br><span class="line">            <span class="keyword">if</span>(res)&#123;</span><br><span class="line">              counts++;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">        System.out.println(counts);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(x == -<span class="number">1</span> || x == <span class="number">10</span> || y == -<span class="number">1</span> || y == <span class="number">10</span>)&#123;</span><br><span class="line">        res = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(vis[x][y])&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      vis[x][y]=<span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">if</span>(maze[x][y] == <span class="string">&#x27;U&#x27;</span>)&#123;</span><br><span class="line">        dfs(x-<span class="number">1</span>,y);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(maze[x][y] == <span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">        dfs(x+<span class="number">1</span>,y);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(maze[x][y] == <span class="string">&#x27;L&#x27;</span>)&#123;</span><br><span class="line">        dfs(x,y-<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(maze[x][y] == <span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">        dfs(x,y+<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方格-2017年省赛"><a href="#方格-2017年省赛" class="headerlink" title="方格(2017年省赛)"></a>方格(2017年省赛)</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>6x6的方格，沿着格子的边线剪开成两部分。 要求这两部分的形状完全相同。</p><p>如下就是三种可行的分割法。</p><p><img src="https://doc.shiyanlou.com/courses/uid1580206-20210317-1615964222859" alt="图片描述"></p><p><img src="https://doc.shiyanlou.com/courses/uid1580206-20210317-1615964217192" alt="图片描述"></p><p><img src="https://doc.shiyanlou.com/courses/uid1580206-20210317-1615964210676" alt="图片描述"></p><p>试计算： 包括这 33 种分法在内，一共有多少种不同的分割方法。 注意：旋转对称的属于同一种分割法。</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>每次从中心点(3,3)开始遍历,到达边界即说明已经分割完毕(我也不是很理解)</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> dirX[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> dirY[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] maze = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">7</span>][<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        maze[<span class="number">3</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">        dfs(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.print(counts/<span class="number">4</span>);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(x == <span class="number">0</span> || y == <span class="number">0</span> || x == <span class="number">6</span> || y == <span class="number">6</span>)&#123;</span><br><span class="line">        counts++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> nx = dirX[i] + x;</span><br><span class="line">        <span class="keyword">int</span> ny = dirY[i] + y;</span><br><span class="line">        <span class="keyword">if</span>(maze[nx][ny] == <span class="number">0</span>)&#123;</span><br><span class="line">          maze[nx][ny] = <span class="number">1</span>;</span><br><span class="line">          maze[<span class="number">6</span>-nx][<span class="number">6</span>-ny]=<span class="number">1</span>;</span><br><span class="line">          dfs(nx,ny);</span><br><span class="line">          maze[nx][ny] = <span class="number">0</span>;</span><br><span class="line">          maze[<span class="number">6</span>-nx][<span class="number">6</span>-ny]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="正则问题-2017年省赛"><a href="#正则问题-2017年省赛" class="headerlink" title="正则问题(2017年省赛)"></a>正则问题(2017年省赛)</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>考虑一种简单的正则表达式：</p><p>只由 x ( ) | 组成的正则表达式。</p><p>小明想求出这个正则表达式能接受的最长字符串的长度。</p><p>例如 ((xx|xxx)x|(x|xx))xx 能接受的最长字符串是： xxxxxx，长度是 6。</p><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>深度优先搜索DFS，注意分隔符’(‘,’)’以及|这几种情况。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> index = <span class="number">0</span>,len;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String s = scan.nextLine();</span><br><span class="line">        <span class="keyword">char</span> chs[] = s.toCharArray();</span><br><span class="line">        len = s.length();</span><br><span class="line">        System.out.println(dfs(chs));</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span> chs[])</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>(index &lt; len)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chs[index] == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">          index++;</span><br><span class="line">          temp += dfs(chs);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(chs[index] == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">          index++;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(chs[index] == <span class="string">&#x27;|&#x27;</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span>(temp &gt; max)&#123;</span><br><span class="line">            max = temp;</span><br><span class="line">          &#125;</span><br><span class="line">          index++;</span><br><span class="line">          temp = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          index++;</span><br><span class="line">          temp++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(temp &gt; max)&#123;</span><br><span class="line">        max = temp;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="受伤的皇后"><a href="#受伤的皇后" class="headerlink" title="受伤的皇后"></a>受伤的皇后</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>有一个  <em>n</em>×<em>n</em> 的国际象棋棋盘（<em>n</em> 行 n 列的方格图），请在棋盘中摆放 <em>n</em> 个受伤的国际象棋皇后，要求：</p><ol><li>任何两个皇后不在同一行。</li><li>任何两个皇后不在同一列。</li><li>如果两个皇后在同一条 45 度角的斜线上，这两个皇后之间行号的差值至少为 3 。</li></ol><p>请问一共有多少种摆放方案。</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第一行包含一个整数 <em>n</em>。</p><p>其中，1≤<em>n</em>≤10。</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数，表示答案。</p><h3 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h3><p>求方案数目,很容易想到深度优先搜索,不过这里要<strong>注意对角线情况的标记</strong>，这里我们进行了状态压缩。</p><p>首先注意每一行都要有一个皇后，这就决定了在<strong>深度遍历时只要行数递增</strong>即可，然后在每一行遍历每一列，判断该格子是否满足摆放要求。满足要求则进入下一行，直到皇后数等于n为止。</p><p>关于判断是否满足摆放要求，这里进行了类似于状态压缩的方法，比如：</p><ul><li>如果第一列已经被遍历了，那么col[i]就等于true,说明这一列已经被遍历了，而不是这一列的所有元素都标记为true</li><li>对于对角线的情况，我们研究它的直线方程，对于正对角线，它的直线方程一般是:x - y = m,那么我们就用这个m来指代这一条直线上的点的情况，但是要注意x - y可能是负数，所以要改为x - y + n；相似的，对于反对角线，它的直线方程一般是:x+y = m,那么我们就用这个m来指代这一条直线上的点的情况。(x是行的位置，y是列的位置)</li></ul><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> col[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> duijiao[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> duijiao2[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        n = scan.nextInt();</span><br><span class="line">        <span class="comment">//深度优先搜索</span></span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">        System.out.println(counts);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(step == n)&#123;</span><br><span class="line">        counts++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!col[i] &amp;&amp; !duijiao[step - i + n] &amp;&amp; !duijiao2[step + i])&#123;</span><br><span class="line">          col[i] = <span class="keyword">true</span>;</span><br><span class="line">          duijiao[step - i + n] = <span class="keyword">true</span>;</span><br><span class="line">          duijiao2[step + i] = <span class="keyword">true</span>;</span><br><span class="line">          dfs(step + <span class="number">1</span>);</span><br><span class="line">          col[i] = <span class="keyword">false</span>;</span><br><span class="line">          duijiao[step - i + n] = <span class="keyword">false</span>;</span><br><span class="line">          duijiao2[step + i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="灌溉-2021模拟"><a href="#灌溉-2021模拟" class="headerlink" title="灌溉(2021模拟)"></a>灌溉(2021模拟)</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>小蓝负责花园的灌溉工作。</p><p>花园可以看成一个 n 行 m列的方格图形。中间有一部分位置上安装有出水管。</p><p>小蓝可以控制一个按钮同时打开所有的出水管，打开时，有出水管的位置可以被认为已经灌溉好。</p><p>每经过一分钟，水就会向四面扩展一个方格，被扩展到的方格可以被认为已经灌溉好。即如果前一分钟某一个方格被灌溉好，则下一分钟它上下左右的四个方格也被灌溉好。</p><p>给定花园水管的位置，请问 <em>k</em> 分钟后，有多少个方格被灌溉好？</p><h3 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第一行包含两个整数 <em>n</em>,<em>m</em>。</p><p>第二行包含一个整数 <em>t</em>，表示出水管的数量。</p><p>接下来 <em>t</em> 行描述出水管的位置，其中第 <em>i</em> 行包含两个数 <em>r</em>,<em>c</em> 表示第 <em>r</em> 行第 c列有一个排水管。</p><p>接下来一行包含一个整数 k。</p><p>其中，1≤<em>n</em>,<em>m</em>≤100,1≤<em>t</em>≤10,1≤<em>k</em>≤100。</p><h3 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数，表示答案。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>典型的深度优先搜索。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> line[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> column[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>]; </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> vis[][] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> dirX[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> dirY[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//在此输入您的代码...</span></span><br><span class="line">        n = scan.nextInt();</span><br><span class="line">        m = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> t = scan.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t;i++)&#123;</span><br><span class="line">          line[i] = scan.nextInt();</span><br><span class="line">          column[i] = scan.nextInt();</span><br><span class="line">          vis[line[i]-<span class="number">1</span>][column[i]-<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> k = scan.nextInt();</span><br><span class="line">        <span class="comment">//dfs</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; t;i++)&#123;</span><br><span class="line">          dfs(line[i]-<span class="number">1</span>,column[i]-<span class="number">1</span>,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[i][j])&#123;</span><br><span class="line">              counts++;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(counts);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</span><br><span class="line">        vis[x][y] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      vis[x][y] = <span class="keyword">true</span>;</span><br><span class="line">      <span class="comment">//四个方向</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> nx = x + dirX[i];</span><br><span class="line">        <span class="keyword">int</span> ny = y + dirY[i];</span><br><span class="line">        <span class="keyword">if</span>(nx &gt;=<span class="number">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &gt;=<span class="number">0</span> &amp;&amp; ny &lt; m)&#123;</span><br><span class="line">          dfs(nx,ny,k-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排列小球-2021年模拟"><a href="#排列小球-2021年模拟" class="headerlink" title="排列小球(2021年模拟)"></a>排列小球(2021年模拟)</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>小蓝有黄绿蓝三种颜色的小球，分别为 R,G,B 个。同样颜色的小球没有区别。</p><p>小蓝将这些小球从左到右排成一排，排完后，将最左边的连续同色小球个数记为 t1，将接下来的连续小球个数记为 t2，以此类推直到最右边的小球。</p><p>请问，总共有多少总摆放小球的方案，使得t1,t2,⋯ 为严格单调递增序列，即 t1≤t2≤t3≤⋯。</p><h3 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入一行包含三个整数R,G,B。</p><p>其中，0≤R,G,B≤50。。</p><h3 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数，表示答案。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>关于严格单调递增，应该是t1 &lt; t2 &lt; t3没有等号的。然后这就是一个典型的深度优先搜索，难点在于怎么进行深度遍历。</p><p>我们可以在进行深度遍历的时候提供一个状态量，用来记录上一次的小球是哪一种颜色，然后在当前遍历中判断所选的球是否跟上一次选择的颜色一样，如果一样则跳过，不一样则再递归遍历。</p><p>在遍历的同时，如何判断递归退出并且方案数目增加呢？我们可以用球的总数是否为0来判断，每次深度遍历球的总数都要减去当前选择的球数，同时注意下一次选择的球数要增加，因为是递增的。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> color[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//在此输入您的代码...</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i++)&#123;</span><br><span class="line">          color[i] = scan.nextInt();</span><br><span class="line">          sum += color[i];</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(sum,-<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        System.out.println(counts);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> sum,<span class="keyword">int</span> pre,<span class="keyword">int</span> next)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(sum == <span class="number">0</span>)&#123;</span><br><span class="line">        counts++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == pre)&#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = next + <span class="number">1</span>;j &lt;= color[i];j++)&#123;</span><br><span class="line">          color[i] -=j;</span><br><span class="line">          <span class="keyword">if</span>(sum &gt;= j)&#123;</span><br><span class="line">            dfs(sum - j,i,j);</span><br><span class="line">          &#125;</span><br><span class="line">          color[i] +=j;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全球变暖-2018省赛"><a href="#全球变暖-2018省赛" class="headerlink" title="全球变暖(2018省赛)"></a>全球变暖(2018省赛)</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>你有一张某海域 NxN 像素的照片，”.”表示海洋、”#”表示陆地，如下所示：</p><p>…….</p><p>.##….</p><p>.##….</p><p>….##.</p><p>..####.</p><p>…###.</p><p>…….</p><p>其中”上下左右”四个方向上连在一起的一片陆地组成一座岛屿。例如上图就有 2 座岛屿。</p><p>由于全球变暖导致了海面上升，科学家预测未来几十年，岛屿边缘一个像素的范围会被海水淹没。具体来说如果一块陆地像素与海洋相邻(上下左右四个相邻像素中有海洋)，它就会被淹没。</p><p>例如上图中的海域未来会变成如下样子：</p><p>…….</p><p>…….</p><p>…….</p><p>…….</p><p>….#..</p><p>…….</p><p>…….</p><p>请你计算：依照科学家的预测，照片中有多少岛屿会被完全淹没。</p><h3 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述"></a>输入描述</h3><p>第一行包含一个整数 <em>N</em> (1≤<em>N</em>≤1000)。</p><p>以下 <em>N</em> 行 <em>N</em> 列代表一张海域照片。</p><p>照片保证第 1 行、第 1 列、第 <em>N</em> 行、第 <em>N</em> 列的像素都是海洋。</p><p>输出一个整数表示答案。</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>这其实是一个求连通集的问题。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> island[][] = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> dir[][] = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//在此输入您的代码...</span></span><br><span class="line">        N = scan.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">          String mid = scan.next();</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; N;j++)&#123;</span><br><span class="line">            island[i][j] = mid.charAt(j);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// for(int i = 0;i &lt; N;i++)&#123;</span></span><br><span class="line">        <span class="comment">//   for(int j = 0;j &lt; N;j++)&#123;</span></span><br><span class="line">        <span class="comment">//     System.out.print(island[i][j]);</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="comment">//   System.out.println(&quot;&quot;);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">//实质上是求连通集</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; N;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(island[i][j] == <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">              flag = <span class="keyword">false</span>;<span class="comment">//用于表示当前岛屿是否会被全部淹掉</span></span><br><span class="line">              sum++;</span><br><span class="line">              dfs(i,j);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum - total);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//深度优先搜索</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)&#123;</span><br><span class="line">          <span class="keyword">int</span> nx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">          <span class="keyword">int</span> ny = y + dir[i][<span class="number">1</span>];</span><br><span class="line">          <span class="keyword">if</span>(nx &lt; N &amp;&amp; ny &lt; N &amp;&amp; nx &gt;= <span class="number">0</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; island[nx][ny] != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//说明四个方向都不是海,可以保留</span></span><br><span class="line">      <span class="keyword">if</span>(count == <span class="number">4</span>)&#123;</span><br><span class="line">        total++;<span class="comment">//剩余的岛屿</span></span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      island[x][y] = <span class="string">&#x27;*&#x27;</span>;<span class="comment">//设置为已经遍历过</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> nx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> ny = y + dir[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(nx &lt; N &amp;&amp; ny &lt; N &amp;&amp; nx &gt;= <span class="number">0</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; island[nx][ny] == <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">          dfs(nx,ny);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><h2 id="分巧克力-2017省赛"><a href="#分巧克力-2017省赛" class="headerlink" title="分巧克力(2017省赛)"></a>分巧克力(2017省赛)</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p>儿童节那天有 K 位小朋友到小明家做客。小明拿出了珍藏的巧克力招待小朋友们。</p><p>小明一共有 N 块巧克力，其中第 <em>i</em> 块是 Hi×Wi 的方格组成的长方形。为了公平起见，</p><p>小明需要从这 N 块巧克力中切出 K 块巧克力分给小朋友们。切出的巧克力需要满足：</p><ol><li>形状是正方形，边长是整数;</li><li>大小相同;</li></ol><p>例如一块 6x5 的巧克力可以切出 6 块 2x2 的巧克力或者 2 块 3x3 的巧克力。</p><p>当然小朋友们都希望得到的巧克力尽可能大，你能帮小明计算出最大的边长是多少么？</p><h3 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述"></a>输入描述</h3><p>第一行包含两个整数N,K (1≤N,K≤105)。</p><p>以下 N 行每行包含两个整数 Hi,Wi (1≤Hi,Wi≤105)。</p><p>输入保证每位小朋友至少能获得一块 1x1 的巧克力。</p><h3 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出切出的正方形巧克力最大可能的边长。</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>因为是找边长，我们很容易想到暴力求解，即:遍历1-10000，但是对于这种<strong>顺序找数字</strong>的问题，我们可以使用二分法，从0-10000中进行二分，找到合适的边长。<strong>二分法注意边界的取法</strong></p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> N = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> K = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> H[] = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> W[] = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">          H[i] = scan.nextInt();</span><br><span class="line">          W[i] = scan.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//二分法</span></span><br><span class="line">        <span class="keyword">int</span> minBorderLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxBorderLen = <span class="number">100000</span>;</span><br><span class="line">        <span class="keyword">int</span> finalBorderLen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(minBorderLen &lt;= maxBorderLen)&#123;</span><br><span class="line">          <span class="keyword">int</span> midBorderLen = (minBorderLen + maxBorderLen) / <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = (H[i] / midBorderLen) * (W[i] / midBorderLen);</span><br><span class="line">            sum += num;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span>(sum &gt;= K)&#123;</span><br><span class="line">            minBorderLen = midBorderLen + <span class="number">1</span>;</span><br><span class="line">            finalBorderLen = midBorderLen;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            maxBorderLen = midBorderLen - <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(finalBorderLen);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="包子凑数"><a href="#包子凑数" class="headerlink" title="包子凑数"></a>包子凑数</h2><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><p>小明几乎每天早晨都会在一家包子铺吃早餐。他发现这家包子铺有 N 种蒸笼，其中第 i 种蒸笼恰好能放 Ai 个包子。每种蒸笼都有非常多笼，可以认为是无限笼。</p><p>每当有顾客想买 X 个包子，卖包子的大叔就会迅速选出若干笼包子来，使得这若干笼中恰好一共有 X 个包子。比如一共有 3 种蒸笼，分别能放 3、4 和 5 个包子。当顾客想买 11 个包子时，大叔就会选 2 笼 3 个的再加 1 笼 5 个的（也可能选出 1 笼 3 个的再加 2 笼 4 个的）。</p><p>当然有时包子大叔无论如何也凑不出顾客想买的数量。比如一共有 3 种蒸笼，分别能放 4、5 和 6 个包子。而顾客想买 7 个包子时，大叔就凑不出来了。</p><p>小明想知道一共有多少种数目是包子大叔凑不出来的。</p><h3 id="输入描述-5"><a href="#输入描述-5" class="headerlink" title="输入描述"></a>输入描述</h3><p>第一行包含一个整数 N(1≤N≤100)。</p><p>以下 N 行每行包含一个整数Ai (1≤Ai≤100)。</p><h3 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述"></a>输出描述</h3><p>一个整数代表答案。如果凑不出的数目有无限多个，输出 INF。</p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>第一眼感觉是<strong>完全背包问题</strong>，事实确实是的。只不过先要判断输入数据的<strong>最大公约数是否为1</strong>。</p><p>至于为什么判断的条件要是1，这是因为只有所有数据的最大公约数是1，则凑出的数目就没有约数的限制了。</p><p>如:假如数据是4,6,则凑出的数目就有个限制，它的公约数得含有2，则奇数它是无法凑出的，而奇数有无限多个。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> N = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> volume[] = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> dp[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10001</span>];</span><br><span class="line">        <span class="keyword">int</span> common;</span><br><span class="line">        volume[<span class="number">0</span>] = scan.nextInt();</span><br><span class="line">        common = volume[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; N;i++)&#123;</span><br><span class="line">          volume[i] = scan.nextInt();</span><br><span class="line">          common = gcd(common,volume[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(common != <span class="number">1</span>)&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;INF&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">//初始化</span></span><br><span class="line">          </span><br><span class="line">          dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;volume[i] + j &lt;= <span class="number">10000</span>;j++)&#123;</span><br><span class="line">              <span class="keyword">if</span>(dp[j] == <span class="number">1</span>)&#123;                             <span class="comment">//说明这个也可以根据组合得到</span></span><br><span class="line">                dp[volume[i] + j] = <span class="number">1</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10000</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i] == <span class="number">0</span>)&#123;</span><br><span class="line">              counts++;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          System.out.println(counts);</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(a % b != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = a % b;</span><br><span class="line">        <span class="keyword">if</span>(mid == <span class="number">0</span>)&#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a = b;</span><br><span class="line">        b = mid;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="思维"><a href="#思维" class="headerlink" title="思维"></a>思维</h1><h2 id="删除字符"><a href="#删除字符" class="headerlink" title="删除字符"></a>删除字符</h2><h3 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个单词，请问在单词中删除 t 个字母后，能得到的字典序最小的单词是什么？</p><h3 id="输入描述-6"><a href="#输入描述-6" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入的第一行包含一个单词，由大写英文字母组成。</p><p>第二行包含一个正整数 <em>t</em>。</p><p>其中，单词长度不超过 100100，<em>t</em> 小于单词长度。</p><h3 id="输出描述-5"><a href="#输出描述-5" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个单词，表示答案。</p><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>这个得搞清楚什么是字典序，这个其实是用来比较字符串大小时可能用到的，如abcde的字典序大于aabcd的字典序，怎么比的呢？</p><p>先比较a,a是相同的，然后比较第二个字符，b&gt;a说明第一个字典序比第二个大。</p><p>理解了字典序后，这题就比较简单了，我们得先判断当前字母是不是字典序最小的，这个可以将它与它后面的字母进行比较，如果不是最小的，则将它删除掉，最后删除t个字母就结束。</p><p>最后得到的结果就是答案了。</p><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String ss = scan.nextLine();</span><br><span class="line">        <span class="keyword">int</span> t = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> len = ss.length();</span><br><span class="line">        <span class="keyword">char</span> chs[] = ss.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isDelete[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[len+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len; i++)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>;j &lt; len;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(chs[i] &gt; chs[j])&#123;</span><br><span class="line">              isDelete[i] = <span class="keyword">true</span>;</span><br><span class="line">              counts ++;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span>(counts == t)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(!isDelete[i])&#123;</span><br><span class="line">            System.out.print(chs[i]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="货物摆放-2021省赛"><a href="#货物摆放-2021省赛" class="headerlink" title="货物摆放(2021省赛)"></a>货物摆放(2021省赛)</h2><h3 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h3><p>小蓝有一个超大的仓库，可以摆放很多货物。</p><p>现在，小蓝有 n 箱货物要摆放在仓库，每箱货物都是规则的正方体。小蓝规定了长、宽、高三个互相垂直的方向，每箱货物的边都必须严格平行于长、宽、高。</p><p>小蓝希望所有的货物最终摆成一个大的长方体。即在长、宽、高的方向上分别堆 <em>L</em>、<em>W</em>、<em>H</em> 的货物,满足 n=L×W×H。</p><p>给定 <em>n</em>，请问有多少种堆放货物的方案满足要求。</p><p>例如，当n=4 时，有以下 66 种方案：1×1×4、1×2×2、1×4×1、2×1×2、2 × 2 × 1、4 × 1 × 11×1×4、1×2×2、1×4×1、2×1×2、2×2×1、4×1×1。</p><p>请问，当 n=2021041820210418 （注意有 1616 位数字）时，总共有多少种方案？</p><p>提示：建议使用计算机编程解决问题。</p><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><p>第一次做的时候是懵的，被这么大的数吓住了，其实这个用Long就行了，然后算出该数的因数，最后三层循环遍历即可。</p><h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//在此输入您的代码...</span></span><br><span class="line">        Long num = <span class="keyword">new</span> Long(<span class="string">&quot;2021041820210418&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">        List&lt;Long&gt; yinzi = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> i = <span class="number">1</span>; i * i &lt;= num;i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(num % i == <span class="number">0</span>)&#123;</span><br><span class="line">            yinzi.add(i);</span><br><span class="line">            <span class="keyword">if</span>(num / i != i)&#123;</span><br><span class="line">              yinzi.add(num/i);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> i:yinzi)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">long</span> j:yinzi)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">long</span> t:yinzi)&#123;</span><br><span class="line">              <span class="keyword">if</span>(i * j * t == num)&#123;</span><br><span class="line">                res++;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字串分值-2020省赛"><a href="#字串分值-2020省赛" class="headerlink" title="字串分值(2020省赛)"></a>字串分值(2020省赛)</h2><h3 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h3><p>对于一个字符串 S，我们定义 S 的分值 f(S) 为 S 中恰好出现一次的字符个数。例如 f(aba)=1，f(abc)=3,f(aaa)=0。</p><p>现在给定一个字符串 S0⋯n−1（长度为 n，1≤n≤105），请你计算对于所有S 的非空子串 Si⋯j(0≤i≤j&lt;n)，f(Si⋯j) 的和是多少。</p><h3 id="输入描述-7"><a href="#输入描述-7" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入一行包含一个由小写字母组成的字符串 S。</p><h3 id="输出描述-6"><a href="#输出描述-6" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出一个整数表示答案。</p><h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><p>这道题可以用暴力解法，但是本题的本意并不是在这里。这里其实是求字母的贡献度，只有当字母个数在子串中个数为1才会有贡献度。</p><p>对此，我们可以从要分析字母A的左右两边出发，分别计算移动了多远才会出现一个字母与A相同，然后停止遍历，记录下步长left和right。然后是怎么算总的贡献度。</p><p>当前**字母的贡献度=(left+1) * (right+1)**。为什么是这个呢？</p><p>以<strong>bacbacdb</strong>为例,我们对第四个字母b进行分析:</p><ul><li>先往左边遍历,可以移动两个单位,则left = 2;</li><li>再往右边遍历,可以移动3个单位,则right = 3;</li></ul><p>则对于b字母,有贡献度的部分为acbacd,满足的字串(<strong>注意要有b</strong>)有：</p><ul><li>从左边第一个字母a开始,分别是acb,acba,acbac,acbacd,有4个</li><li>然后左边从第二个字母c开始,为cb,cba,cbac,cbacd,有4个</li><li>从左边第三个字母b开始,为b,ba,bac,bacd,有4个</li></ul><p>我们在分析过程中可以得到规律,就是**(往左移动的步数+1) * (往右移动的步数+1)<strong>,加1是因为</strong>要包含分析的字母**。</p><h3 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//在此输入您的代码...</span></span><br><span class="line">        String str = scan.next();</span><br><span class="line">        <span class="keyword">char</span> chs[] = str.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> len = str.length();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">          <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">char</span> c = chs[i];</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>;j &gt;=<span class="number">0</span> &amp;&amp; chs[j] != c;j --)&#123;</span><br><span class="line">            left++;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j  = i + <span class="number">1</span>;j &lt; len &amp;&amp; chs[j] != c;j++)&#123;</span><br><span class="line">            right++;</span><br><span class="line">          &#125;</span><br><span class="line">          res += (left+<span class="number">1</span>)*(right+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="螺旋折线-2018省赛"><a href="#螺旋折线-2018省赛" class="headerlink" title="螺旋折线(2018省赛)"></a>螺旋折线(2018省赛)</h2><h3 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h3><p>如下图所示的螺旋折线经过平面上所有整点恰好一次。</p><p><img src="https://doc.shiyanlou.com/courses/uid1580206-20210202-1612250322579" alt="img"></p><p>对于整点 (X,Y)，我们定义它到原点的距离 dis(X,Y) 是从原点到 (X,Y) 的螺旋折线段的长度。</p><p>例如 dis(0,1)=3,dis(−2,−1)=9。</p><p>给出整点坐标 (X,Y)，你能计算出 dis(X,Y) 吗？</p><h3 id="输入描述-8"><a href="#输入描述-8" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入格式：</p><p>输入一行，X和Y，−109≤X，Y≤109。</p><h3 id="输出描述-7"><a href="#输出描述-7" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出 dis(X,Y)。</p><h3 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h3><p>刚开始时使用的时递归，但是由于数据量太大，爆栈了，所以递归行不通。</p><p>其实我们可以找规律。很明显的，这个图是有一定规律的，可以将其看成很多个正方形，只要把中间断的补齐就好了。</p><p>如图：</p><p>有了上面的思路，就先找到点所处的正方形。通过观察我们可以发现规律，点所处的正方形的边长为2 * max(abs(X),abs(Y))。</p><p>找到边长后，我们进行下面两步：</p><ul><li>计算之前的正方形边长之和,这是一个等差数列求和</li><li>计算从点所处正方形的开始位置到点的位置所需要经过的步数</li></ul><p>算完之后，两者相加即可。</p><h3 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> X,Y;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        X = scanner.nextLong();</span><br><span class="line">        Y = scanner.nextLong();</span><br><span class="line">        <span class="keyword">long</span> maxLen = Math.max(Math.abs(X), Math.abs(Y));</span><br><span class="line">        <span class="keyword">long</span> preSum = ((maxLen - <span class="number">1</span>) * maxLen) * <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">long</span> remain = calRemain(X, Y, maxLen);</span><br><span class="line">        System.out.println(preSum+remain);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">calRemain</span><span class="params">(<span class="keyword">long</span> x,<span class="keyword">long</span> y,<span class="keyword">long</span> border)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//边长</span></span><br><span class="line">        <span class="keyword">long</span> width = <span class="number">2</span> * border;</span><br><span class="line">        <span class="keyword">long</span> result = <span class="number">0l</span>;</span><br><span class="line">        <span class="keyword">if</span>(x == -border &amp;&amp; y != border) &#123;</span><br><span class="line">            result = y - (-border);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(y == border) &#123;</span><br><span class="line">            result = width + x - (-border);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x == border) &#123;</span><br><span class="line">            result = <span class="number">2</span> * width + border - y;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(y == -border) &#123;</span><br><span class="line">            result = <span class="number">8</span> * border - (x - (-border));</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0l</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平面切分"><a href="#平面切分" class="headerlink" title="平面切分"></a>平面切分</h2><h3 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h3><p>平面上有 N 条直线，其中第 i 条直线是 y=A i×x+B i。</p><p>请计算这些直线将平面分成了几个部分。</p><h3 id="输入描述-9"><a href="#输入描述-9" class="headerlink" title="输入描述"></a>输入描述</h3><p>第一行包含一个整数 N。</p><p>以下 N 行，每行包含两个整数 Ai,Bi。</p><p>其中，1≤N≤1000,−105≤Ai,Bi≤105。</p><h3 id="输出描述-8"><a href="#输出描述-8" class="headerlink" title="输出描述"></a>输出描述</h3><p>一个整数代表答案。</p><h3 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h3><p>这其实是一个找规律的问题，我们通过在纸上画几张示例，可以发现：</p><p>若平面上已经有n条直线，当我们再加一条时</p><ul><li>若该直线与n条直线有m个交点，则会新增(m+1)个平面</li></ul><p>同时，我们需要注意直线是否重合，重合的话就没必要讨论，跳过该条直线，除此之外，还有直线与直线交点也可能重复，所以我们需要去重，这里我们使用set进行去重。</p><h3 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> s[<span class="number">1010</span>][<span class="number">2</span>];<span class="comment">//存储直线的A，B </span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="keyword">bool</span> st[<span class="number">1010</span>]; <span class="comment">//false表示不是重边 </span></span><br><span class="line">pair&lt;<span class="keyword">long</span> <span class="keyword">double</span>,<span class="keyword">long</span> <span class="keyword">double</span>&gt; p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;s[i][<span class="number">0</span>]&gt;&gt;s[i][<span class="number">1</span>];</span><br><span class="line">        set&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">double</span>,<span class="keyword">long</span> <span class="keyword">double</span>&gt; &gt; points;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(st[j])<span class="keyword">continue</span>;<span class="comment">//直线是重边，跳过 </span></span><br><span class="line">            <span class="keyword">if</span>(s[i][<span class="number">0</span>]==s[j][<span class="number">0</span>])&#123;<span class="comment">//两条直线斜率相等时，判断是平行还是重合 </span></span><br><span class="line">                <span class="keyword">if</span>(s[i][<span class="number">1</span>]==s[j][<span class="number">1</span>])&#123;</span><br><span class="line">                    st[i]=<span class="literal">true</span>;<span class="comment">//待添加直线是重边，退出循环 </span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">continue</span>;<span class="comment">//直线平行，不需要计算交点 </span></span><br><span class="line">            &#125;</span><br><span class="line">            p.first=(s[j][<span class="number">1</span>]-s[i][<span class="number">1</span>])/(s[i][<span class="number">0</span>]-s[j][<span class="number">0</span>]);<span class="comment">//交点的x坐标 </span></span><br><span class="line">            p.second=s[i][<span class="number">0</span>]*p.first+s[i][<span class="number">1</span>];<span class="comment">//交点的y坐标 </span></span><br><span class="line">            points.<span class="built_in">insert</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])ans+=points.<span class="built_in">size</span>()+<span class="number">1</span>;<span class="comment">//若当前直线不是重边，更新答案 </span></span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><h2 id="日志统计"><a href="#日志统计" class="headerlink" title="日志统计"></a>日志统计</h2><h3 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h3><p>小明维护着一个程序员论坛。现在他收集了一份”点赞”日志，日志共有 <em>N</em> 行。其中每一行的格式是：</p><p>ts,id</p><p>表示在 <em>t</em> <em>s</em> 时刻编号 <em>i</em> <em>d</em> 的帖子收到一个”赞”。</p><p>现在小明想统计有哪些帖子曾经是”热帖”。如果一个帖子曾在任意一个长度为 <em>D</em> 的时间段内收到不少于 <em>K</em> 个赞，小明就认为这个帖子曾是”热帖”。</p><p>具体来说，如果存在某个时刻 T 满足该帖在 [<em>T</em>,<em>T</em>+<em>D</em>) 这段时间内(注意是左闭右开区间)收到不少于 <em>K</em> 个赞，该帖就曾是”热帖”。</p><p>给定日志，请你帮助小明统计出所有曾是”热帖”的帖子编号。</p><h3 id="输入描述-10"><a href="#输入描述-10" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入格式：</p><p>第一行包含三个整数 <em>N</em>,<em>D</em>,<em>K</em>。</p><p>以下 N 行每行一条日志，包含两个整数 ts 和 id。</p><p>其中， 1≤<em>K</em>≤<em>N</em>≤105,0≤<em>t**s</em>≤105,0≤<em>i**d</em>≤105。</p><h3 id="输出描述-9"><a href="#输出描述-9" class="headerlink" title="输出描述"></a>输出描述</h3><p>按从小到大的顺序输出热帖 <em>i</em> <em>d</em>。每个 <em>i</em> <em>d</em> 一行。</p><h3 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h3><p>先将数据按id从小到大排序，同一id的话按时间从小到大排序，然后我们通过双指针i,j来解决该问题。</p><p>其中i是当前id前一时刻所处的位置，j为当前id之后时间所处的位置</p><p>i更新的条件分为两种情况</p><ul><li>我们已经遍历到另外一个id的评论了，即record[i].id!=record[j].id,此时更新i为j</li><li>还是处于同一个评论id，但是和j所处的评论时间相差超过了D,此时i的指针向前移动,即i++</li></ul><p>j更新的条件是处于同一id下且相差的时间不超过D</p><h3 id="代码-14"><a href="#代码-14" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">// 1:无需package</span></span><br><span class="line"><span class="comment">// 2: 类名必须Main, 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Record</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> time;</span><br><span class="line">        <span class="keyword">int</span> id;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Record</span><span class="params">(<span class="keyword">int</span> time,<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">            <span class="keyword">this</span>.time = time;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//在此输入您的代码...</span></span><br><span class="line">        <span class="keyword">int</span> N = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> D = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> K = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span> ts = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//判断该帖子是否满足热门帖子</span></span><br><span class="line">        <span class="keyword">boolean</span> hasMeet[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">100001</span>];</span><br><span class="line">        Record record[] = <span class="keyword">new</span> Record[N];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">            ts = scan.nextInt();</span><br><span class="line">            id = scan.nextInt();</span><br><span class="line">            record[i] = <span class="keyword">new</span> Record(ts,id);</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(record, <span class="number">0</span>, N, <span class="keyword">new</span> Comparator&lt;Record&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Record o1, Record o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o1.id == o2.id)&#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.time - o2.time;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> o1.id - o2.id;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(&quot;排序后结果:&quot;);</span></span><br><span class="line"><span class="comment">//        for(int i  = 0;i &lt; N;i++)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(record[i].time + &quot; &quot; + record[i].id);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">int</span> id_max = record[N-<span class="number">1</span>].id;</span><br><span class="line">        <span class="comment">//使用双指针</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;i &lt; N;)&#123;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; N &amp;&amp; record[i].id == record[j].id &amp;&amp; record[j].time - record[i].time &lt; D)&#123;</span><br><span class="line">                <span class="comment">//指针向前移动</span></span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//点赞数满足</span></span><br><span class="line">            <span class="keyword">if</span>(j - i &gt;= K)&#123;</span><br><span class="line">                hasMeet[record[i].id] = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i &gt;= N || j &gt;= N)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(record[i].id != record[j].id)&#123;</span><br><span class="line">                <span class="comment">//此时是另外一个编号的评论了</span></span><br><span class="line">                i = j;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//说明只是时间间隔超过了D,则把时间往后移</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= id_max;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hasMeet[i])&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h1><h2 id="地宫取宝"><a href="#地宫取宝" class="headerlink" title="地宫取宝"></a>地宫取宝</h2><h3 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h3><p>X 国王有一个地宫宝库。是 n×m 个格子的矩阵。每个格子放一件宝贝。每个宝贝贴着价值标签。</p><p>地宫的入口在左上角，出口在右下角。</p><p>小明被带到地宫的入口，国王要求他只能向右或向下行走。</p><p>走过某个格子时，如果那个格子中的宝贝价值比小明手中任意宝贝价值都大，小明就可以拿起它（当然，也可以不拿）。</p><p>当小明走到出口时，如果他手中的宝贝恰好是 k件，则这些宝贝就可以送给小明。</p><p>请你帮小明算一算，在给定的局面下，他有多少种不同的行动方案能获得这 k 件宝贝。</p><h3 id="输入描述-11"><a href="#输入描述-11" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入一行 3 个整数，用空格分开：n,m,k(1≤n,m≤50,1≤k≤12)。</p><p>接下来有 n 行数据，每行有 m个整数Ci (0≤Ci≤12) 代表这个格子上的宝物的价值。</p><h3 id="输出描述-10"><a href="#输出描述-10" class="headerlink" title="输出描述"></a>输出描述</h3><p>要求输出一个整数，表示正好取 k个宝贝的行动方案数。该数字可能很大，输出它对 109+7 取模的结果。</p><h3 id="代码-15"><a href="#代码-15" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UndergroundTakeTreasure</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> treasure[][];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dp[][][][];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">n = scanner.nextInt();</span><br><span class="line">m = scanner.nextInt();</span><br><span class="line">k = scanner.nextInt();</span><br><span class="line">treasure = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; m;j++) &#123;</span><br><span class="line">treasure[i][j] = scanner.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> result = dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line">scanner.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记忆化搜索</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num 手上的宝物数目</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> max 手上宝物的值的最大值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> num,<span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line"><span class="comment">//不满足的情况</span></span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= n || y &lt; <span class="number">0</span> || y &gt;= m || num &gt; k) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(dp[x][y][max+<span class="number">1</span>][num] != -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//说明这种情况之前出现过</span></span><br><span class="line"><span class="keyword">return</span> dp[x][y][max+<span class="number">1</span>][num];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//到达终点了</span></span><br><span class="line"><span class="keyword">int</span> value = treasure[x][y];</span><br><span class="line"><span class="keyword">if</span>(x == n - <span class="number">1</span> &amp;&amp; y == m - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(num == k || (num == k - <span class="number">1</span> &amp;&amp; value &gt; max)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行向右或者向下移动</span></span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(value &gt; max) &#123;</span><br><span class="line"><span class="comment">//这是拿宝物的情况</span></span><br><span class="line"><span class="comment">//向右移动</span></span><br><span class="line">result += dfs(x+<span class="number">1</span>, y, num+<span class="number">1</span>, value);</span><br><span class="line">result %= MOD;</span><br><span class="line"><span class="comment">//向下移动</span></span><br><span class="line">result += dfs(x, y+<span class="number">1</span>, num+<span class="number">1</span>, value);</span><br><span class="line">result %= MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不拿宝物</span></span><br><span class="line"><span class="comment">//向右移动</span></span><br><span class="line">result += dfs(x+<span class="number">1</span>, y, num, max);</span><br><span class="line">result %= MOD;</span><br><span class="line"><span class="comment">//向下移动</span></span><br><span class="line">result += dfs(x, y+<span class="number">1</span>, num, max);</span><br><span class="line">result %= MOD;</span><br><span class="line">dp[x][y][max+<span class="number">1</span>][num] = result;</span><br><span class="line"><span class="comment">//注意这是max+1,因为max是-1开始的</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对dp进行初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][m+<span class="number">1</span>][<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; m;j ++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>  t = <span class="number">0</span>;t &lt; <span class="number">15</span>;t ++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> z = <span class="number">0</span>;z &lt; <span class="number">15</span>;z ++) &#123;</span><br><span class="line">dp[i][j][t][z] = -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;DFS算法&quot;&gt;&lt;a href=&quot;#DFS算法&quot; class=&quot;headerlink&quot; title=&quot;DFS算法&quot;&gt;&lt;/a&gt;DFS算法&lt;/h1&gt;&lt;h2 id=&quot;迷宫-2017年省赛&quot;&gt;&lt;a href=&quot;#迷宫-2017年省赛&quot; class=</summary>
      
    
    
    
    <category term="题解" scheme="https://lzl2040.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="蓝桥杯" scheme="https://lzl2040.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo部署博客项目</title>
    <link href="https://lzl2040.github.io/2022/01/27/Hexo%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"/>
    <id>https://lzl2040.github.io/2022/01/27/Hexo%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-01-27T09:37:59.000Z</published>
    <updated>2022-09-14T14:37:18.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo使用教程"><a href="#hexo使用教程" class="headerlink" title="hexo使用教程"></a>hexo使用教程</h1><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><h3 id="1-创建博客项目"><a href="#1-创建博客项目" class="headerlink" title="1.创建博客项目"></a>1.创建博客项目</h3><p>使用命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init 项目名称</span><br></pre></td></tr></table></figure><h3 id="2-创建一篇新的博客"><a href="#2-创建一篇新的博客" class="headerlink" title="2.创建一篇新的博客"></a>2.创建一篇新的博客</h3><p>使用命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &#x27;文章名&#x27;</span><br></pre></td></tr></table></figure><h3 id="3-生成静态文件"><a href="#3-生成静态文件" class="headerlink" title="3.生成静态文件"></a>3.生成静态文件</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h3 id="4-部署远程仓库"><a href="#4-部署远程仓库" class="headerlink" title="4.部署远程仓库"></a>4.部署远程仓库</h3><p>找到config.yml文件,在其最下面找到deploy项目,加入如下:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:yourName/yourName.github.io.git # 码云仓库</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="5-部署到GitHub上"><a href="#5-部署到GitHub上" class="headerlink" title="5.部署到GitHub上"></a>5.部署到GitHub上</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这样，一个hexo博客项目就被部署到GitHub上了。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-extends-includes-layout-pug-block-content-include-includes-mixins-post-ui-pug-recent-posts-recent-posts-postUI-include-includes-pagination-pug"><a href="#1-extends-includes-layout-pug-block-content-include-includes-mixins-post-ui-pug-recent-posts-recent-posts-postUI-include-includes-pagination-pug" class="headerlink" title="1.extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug"></a>1.extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>没有pug文件的渲染库</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>使用命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><p>可能会有warning,但这个问题影响不大,warning通常是npm版本引起的，可以换一个不同的版本。</p><h3 id="2-Deployer-not-found-git"><a href="#2-Deployer-not-found-git" class="headerlink" title="2.Deployer not found: git"></a>2.Deployer not found: git</h3><h4 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h4><p>这是因为deployer程序还没安装</p><h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h4><p>使用命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo使用教程&quot;&gt;&lt;a href=&quot;#hexo使用教程&quot; class=&quot;headerlink&quot; title=&quot;hexo使用教程&quot;&gt;&lt;/a&gt;hexo使用教程&lt;/h1&gt;&lt;h2 id=&quot;使用教程&quot;&gt;&lt;a href=&quot;#使用教程&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="hexo" scheme="https://lzl2040.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
